"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@passwordless-id";
exports.ids = ["vendor-chunks/@passwordless-id"];
exports.modules = {

/***/ "(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/authenticatorMetadata.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@passwordless-id/webauthn/dist/esm/authenticatorMetadata.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authenticatorMetadata: () => (/* binding */ authenticatorMetadata)\n/* harmony export */ });\n/**\n * The source comes from\n * \"official\" https://mds.fidoalliance.org/\n * and the\n * \"community-driven\" https://github.com/passkeydeveloper/passkey-authenticator-aaguids\n * combined together.\n */ const authenticatorMetadata = {\n    \"00000000-0000-0000-0000-000000000000\": \"Unknown authenticator\",\n    \"0076631b-d4a0-427f-5773-0ec71c9e0279\": \"HYPR FIDO2 Authenticator\",\n    \"07a9f89c-6407-4594-9d56-621d5f1e358b\": \"NXP Semiconductros FIDO2 Conformance Testing CTAP2 Authenticator\",\n    \"08987058-cadc-4b81-b6e1-30de50dcbe96\": \"Windows Hello\",\n    \"092277e5-8437-46b5-b911-ea64b294acb7\": \"Taglio CTAP2.1 CS\",\n    \"09591fc6-9811-48f7-8f57-b9f23df6413f\": \"Pone Biometrics OFFPAD Authenticator\",\n    \"0acf3011-bc60-f375-fb53-6f05f43154e0\": \"Nymi FIDO2 Authenticator\",\n    \"0bb43545-fd2c-4185-87dd-feb0b2916ace\": \"Security Key NFC by Yubico - Enterprise Edition\",\n    \"0d9b2e56-566b-c393-2940-f821b7f15d6d\": \"Excelsecu eSecu FIDO2 Pro Security Key\",\n    \"0ea242b4-43c4-4a1b-8b17-dd6d0b6baec6\": \"Keeper\",\n    \"1105e4ed-af1d-02ff-ffff-ffffffffffff\": \"Egomet FIDO2 Authenticator for Android\",\n    \"12ded745-4bed-47d4-abaa-e713f51d6393\": \"Feitian AllinOne FIDO2 Authenticator\",\n    \"149a2021-8ef6-4133-96b8-81f8d5b7f1f5\": \"Security Key by Yubico with NFC\",\n    \"17290f1e-c212-34d0-1423-365d729f09d9\": \"Thales PIN iOS SDK\",\n    \"175cd298-83d2-4a26-b637-313c07a6434e\": \"Chunghwa Telecom FIDO2 Smart Card Authenticator\",\n    \"19083c3d-8383-4b18-bc03-8f1c9ab2fd1b\": \"YubiKey 5 Series\",\n    \"1c086528-58d5-f211-823c-356786e36140\": \"Atos CardOS FIDO2\",\n    \"20f0be98-9af9-986a-4b42-8eca4acb28e4\": \"Excelsecu eSecu FIDO2 Fingerprint Security Key\",\n    \"2194b428-9397-4046-8f39-007a1605a482\": \"IDPrime 931 Fido\",\n    \"234cd403-35a2-4cc2-8015-77ea280c77f5\": \"Feitian ePass FIDO2-NFC Series (CTAP2.1, CTAP2.0, U2F)\",\n    \"23786452-f02d-4344-87ed-aaf703726881\": \"SafeNet eToken Fusion CC\",\n    \"2772ce93-eb4b-4090-8b73-330f48477d73\": \"Security Key NFC by Yubico - Enterprise Edition Preview\",\n    \"2c0df832-92de-4be1-8412-88a8f074df4a\": \"Feitian FIDO Smart Card\",\n    \"2d3bec26-15ee-4f5d-88b2-53622490270b\": \"HID Crescendo Key V2\",\n    \"2fc0579f-8113-47ea-b116-bb5a8db9202a\": \"YubiKey 5 Series with NFC\",\n    \"2ffd6452-01da-471f-821b-ea4bf6c8676a\": \"IDPrime 941 Fido\",\n    \"30b5035e-d297-4fc1-b00b-addc96ba6a97\": \"OneSpan FIDO Touch\",\n    \"30b5035e-d297-4ff1-b00b-addc96ba6a98\": \"OneSpan DIGIPASS FX1 BIO\",\n    \"3124e301-f14e-4e38-876d-fbeeb090e7bf\": \"YubiKey 5 Series with Lightning Preview\",\n    \"31c3f7ff-bf15-4327-83ec-9336abcbcd34\": \"WinMagic FIDO Eazy - Software\",\n    \"341e4da9-3c2e-8103-5a9f-aad887135200\": \"Ledger Nano S FIDO2 Authenticator\",\n    \"34f5766d-1536-4a24-9033-0e294e510fb0\": \"YubiKey 5 Series with NFC Preview\",\n    \"361a3082-0278-4583-a16f-72a527f973e4\": \"eWBM eFA500 FIDO2 Authenticator\",\n    \"3789da91-f943-46bc-95c3-50ea2012f03a\": \"NEOWAVE Winkeo FIDO2\",\n    \"39a5647e-1853-446c-a1f6-a79bae9f5bc7\": \"IDmelon\",\n    \"3b1adb99-0dfe-46fd-90b8-7f7614a4de2a\": \"GoTrust Idem Key FIDO2 Authenticator\",\n    \"3e078ffd-4c54-4586-8baa-a77da113aec5\": \"Hideez Key 3 FIDO2\",\n    \"3e22415d-7fdf-4ea4-8a0c-dd60c4249b9d\": \"Feitian iePass FIDO Authenticator\",\n    \"3f59672f-20aa-4afe-b6f4-7e5e916b6d98\": \"Arculus FIDO 2.1 Key Card [P71]\",\n    \"42b4fb4a-2866-43b2-9bf7-6c6669c2e5d3\": \"Google Titan Security Key v2\",\n    \"454e5346-4944-4ffd-6c93-8e9267193e9a\": \"Ensurity ThinC\",\n    \"454e5346-4944-4ffd-6c93-8e9267193e9b\": \"Ensurity AUTH BioPro\",\n    \"47ab2fb4-66ac-4184-9ae1-86be814012d5\": \"Security Key NFC by Yubico - Enterprise Edition\",\n    \"4b3f8944-d4f2-4d21-bb19-764a986ec160\": \"KeyXentic FIDO2 Secp256R1 FIDO2 CTAP2 Authenticator\",\n    \"4c0cf95d-2f40-43b5-ba42-4c83a11c04ba\": \"Feitian BioPass FIDO2 Pro Authenticator\",\n    \"4c50ff10-1057-4fc6-b8ed-43a529530c3c\": \"ImproveID Authenticator\",\n    \"4d41190c-7beb-4a84-8018-adf265a6352d\": \"Thales IDPrime FIDO Bio\",\n    \"4e768f2c-5fab-48b3-b300-220eb487752b\": \"Hideez Key 4 FIDO2 SDK\",\n    \"504d7149-4e4c-3841-4555-55445a677357\": \"WiSECURE AuthTron USB FIDO2 Authenticator\",\n    \"50726f74-6f6e-5061-7373-50726f746f6e\": \"Proton Pass\",\n    \"50a45b0c-80e7-f944-bf29-f552bfa2e048\": \"ACS FIDO Authenticator\",\n    \"516d3969-5a57-5651-5958-4e7a49434167\": \"SmartDisplayer BobeePass FIDO2 Authenticator\",\n    \"531126d6-e717-415c-9320-3d9aa6981239\": \"Dashlane\",\n    \"53414d53-554e-4700-0000-000000000000\": \"Samsung Pass\",\n    \"5343502d-5343-5343-6172-644649444f32\": \"ESS Smart Card Inc. Authenticator\",\n    \"54d9fee8-e621-4291-8b18-7157b99c5bec\": \"HID Crescendo Enabled\",\n    \"5626bed4-e756-430b-a7ff-ca78c8b12738\": \"VALMIDO PRO FIDO\",\n    \"58b44d0b-0a7c-f33a-fd48-f7153c871352\": \"Ledger Nano S Plus FIDO2 Authenticator\",\n    \"5b0e46ba-db02-44ac-b979-ca9b84f5e335\": \"YubiKey 5 FIPS Series with Lightning Preview\",\n    \"5ca1ab1e-1337-fa57-f1d0-a117e71ca702\": \"Allthenticator App: roaming BLE FIDO2 Allthenticator for Windows, Mac, Linux, and Allthenticate door readers\",\n    \"5d629218-d3a5-11ed-afa1-0242ac120002\": \"Swissbit iShield Key Pro\",\n    \"5fdb81b8-53f0-4967-a881-f5ec26fe4d18\": \"VinCSS FIDO2 Authenticator\",\n    \"6002f033-3c07-ce3e-d0f7-0ffe5ed42543\": \"Excelsecu eSecu FIDO2 Fingerprint Key\",\n    \"6028b017-b1d4-4c02-b4b3-afcdafc96bb2\": \"Windows Hello\",\n    \"61250591-b2bc-4456-b719-0b17be90bb30\": \"eWBM eFPA FIDO2 Authenticator\",\n    \"62e54e98-c209-4df3-b692-de71bb6a8528\": \"YubiKey 5 FIPS Series with NFC Preview\",\n    \"664d9f67-84a2-412a-9ff7-b4f7d8ee6d05\": \"OpenSK authenticator\",\n    \"66a0ccb3-bd6a-191f-ee06-e375c50b9846\": \"Thales Bio iOS SDK\",\n    \"692db549-7ae5-44d5-a1e5-dd20a493b723\": \"HID Crescendo Key\",\n    \"69700f79-d1fb-472e-bd9b-a3a3b9a9eda0\": \"Pone Biometrics OFFPAD Authenticator\",\n    \"6d44ba9b-f6ec-2e49-b930-0c8fe920cb73\": \"Security Key by Yubico with NFC\",\n    \"6dae43be-af9c-417b-8b9f-1b611168ec60\": \"Dapple Authenticator from Dapple Security Inc.\",\n    \"73402251-f2a8-4f03-873e-3cb6db604b03\": \"uTrust FIDO2 Security Key\",\n    \"73bb0cd4-e502-49b8-9c6f-b59445bf720b\": \"YubiKey 5 FIPS Series\",\n    \"74820b05-a6c9-40f9-8fb0-9f86aca93998\": \"SafeNet eToken Fusion\",\n    \"760eda36-00aa-4d29-855b-4012a182cdeb\": \"Security Key NFC by Yubico Preview\",\n    \"77010bd7-212a-4fc9-b236-d2ca5e9d4084\": \"Feitian BioPass FIDO2 Authenticator\",\n    \"771b48fd-d3d4-4f74-9232-fc157ab0507a\": \"Edge on Mac\",\n    \"7d1351a6-e097-4852-b8bf-c9ac5c9ce4a3\": \"YubiKey Bio Series - Multi-protocol Edition\",\n    \"7d2afadd-bf6b-44a2-a66b-e831fceb8eff\": \"Taglio CTAP2.1 EP\",\n    \"7e3f3d30-3557-4442-bdae-139312178b39\": \"RSA DS100\",\n    \"820d89ed-d65a-409e-85cb-f73f0578f82a\": \"IDmelon iOS Authenticator\",\n    \"833b721a-ff5f-4d00-bb2e-bdda3ec01e29\": \"Feitian ePass FIDO2 Authenticator\",\n    \"83c47309-aabb-4108-8470-8be838b573cb\": \"YubiKey Bio Series (Enterprise Profile)\",\n    \"85203421-48f9-4355-9bc8-8a53846e5083\": \"YubiKey 5 FIPS Series with Lightning\",\n    \"87dbc5a1-4c94-4dc8-8a47-97d800fd1f3c\": \"eWBM eFA320 FIDO2 Authenticator\",\n    \"8836336a-f590-0921-301d-46427531eee6\": \"Thales Bio Android SDK\",\n    \"8876631b-d4a0-427f-5773-0ec71c9e0279\": \"Solo Secp256R1 FIDO2 CTAP2 Authenticator\",\n    \"88bbd2f0-342a-42e7-9729-dd158be5407a\": \"Precision InnaIT Key FIDO 2 Level 2 certified\",\n    \"891494da-2c90-4d31-a9cd-4eab0aed1309\": \"S\\xe9same\",\n    \"8976631b-d4a0-427f-5773-0ec71c9e0279\": \"Solo Tap Secp256R1 FIDO2 CTAP2 Authenticator\",\n    \"89b19028-256b-4025-8872-255358d950e4\": \"Sentry Enterprises CTAP2 Authenticator\",\n    \"8c97a730-3f7b-41a6-87d6-1e9b62bda6f0\": \"FT-JCOS FIDO Fingerprint Card\",\n    \"8d1b1fcb-3c76-49a9-9129-5515b346aa02\": \"IDEMIA ID-ONE Card\",\n    \"91ad6b93-264b-4987-8737-3a690cad6917\": \"Token Ring FIDO2 Authenticator\",\n    \"931327dd-c89b-406c-a81e-ed7058ef36c6\": \"Swissbit iShield Key FIDO2\",\n    \"95442b2e-f15e-4def-b270-efb106facb4e\": \"eWBM eFA310 FIDO2 Authenticator\",\n    \"95e4d58c-056e-4a65-866d-f5a69659e880\": \"TruU Windows Authenticator\",\n    \"970c8d9c-19d2-46af-aa32-3f448db49e35\": \"WinMagic FIDO Eazy - TPM\",\n    \"973446ca-e21c-9a9b-99f5-9b985a67af0f\": \"ACS FIDO Authenticator Card\",\n    \"9876631b-d4a0-427f-5773-0ec71c9e0279\": \"Somu Secp256R1 FIDO2 CTAP2 Authenticator\",\n    \"998f358b-2dd2-4cbe-a43a-e8107438dfb3\": \"OnlyKey Secp256R1 FIDO2 CTAP2 Authenticator\",\n    \"99bf4610-ec26-4252-b31f-7380ccd59db5\": \"ZTPass Card\",\n    \"9c835346-796b-4c27-8898-d6032f515cc5\": \"Cryptnox FIDO2\",\n    \"9d3df6ba-282f-11ed-a261-0242ac120002\": \"Arculus FIDO2/U2F Key Card\",\n    \"9ddd1817-af5a-4672-a2b9-3e3dd95000a9\": \"Windows Hello\",\n    \"9f0d8150-baa5-4c00-9299-ad62c8bb4e87\": \"GoTrust Idem Card FIDO2 Authenticator\",\n    \"9f77e279-a6e2-4d58-b700-31e5943c6a98\": \"Hyper FIDO Pro\",\n    \"a02167b9-ae71-4ac7-9a07-06432ebb6f1c\": \"YubiKey 5 Series with Lightning\",\n    \"a1f52be5-dfab-4364-b51c-2bd496b14a56\": \"OCTATCO EzFinger2 FIDO2 AUTHENTICATOR\",\n    \"a25342c0-3cdc-4414-8e46-f4807fca511c\": \"YubiKey 5 Series with NFC\",\n    \"a3975549-b191-fd67-b8fb-017e2917fdb3\": \"Excelsecu eSecu FIDO2 NFC Security Key\",\n    \"a4e9fc6d-4cbe-4758-b8ba-37598bb5bbaa\": \"Security Key NFC by Yubico\",\n    \"ab32f0c6-2239-afbb-c470-d2ef4e254db6\": \"TEST (DUMMY RECORD)\",\n    \"ab32f0c6-2239-afbb-c470-d2ef4e254db7\": \"TOKEN2 FIDO2 Security Key\",\n    \"adce0002-35bc-c60a-648b-0b25f1f05503\": \"Chrome on Mac\",\n    \"aeb6569c-f8fb-4950-ac60-24ca2bbe2e52\": \"HID Crescendo C2300\",\n    \"b267239b-954f-4041-a01b-ee4f33c145b6\": \"authenton1 - CTAP2.1\",\n    \"b50d5e0a-7f81-4959-9b12-f45407407503\": \"IDPrime 3940 FIDO\",\n    \"b5397666-4885-aa6b-cebf-e52262a439a2\": \"Chromium Browser\",\n    \"b6ede29c-3772-412c-8a78-539c1f4c62d2\": \"Feitian BioPass FIDO2 Plus Authenticator\",\n    \"b84e4048-15dc-4dd0-8640-f4f60813c8af\": \"NordPass\",\n    \"b92c3f9a-c014-4056-887f-140a2501163b\": \"Security Key by Yubico\",\n    \"b93fd961-f2e6-462f-b122-82002247de78\": \"Android Authenticator with SafetyNet Attestation\",\n    \"ba76a271-6eb6-4171-874d-b6428dbe3437\": \"ATKey.ProS\",\n    \"ba86dc56-635f-4141-aef6-00227b1b9af6\": \"TruU Windows Authenticator\",\n    \"bada5566-a7aa-401f-bd96-45619a55120d\": \"1Password\",\n    \"bbf4b6a7-679d-f6fc-c4f2-8ac0ddf9015a\": \"Excelsecu eSecu FIDO2 PRO Security Key\",\n    \"bc2fe499-0d8e-4ffe-96f3-94a82840cf8c\": \"OCTATCO EzQuant FIDO2 AUTHENTICATOR\",\n    \"be727034-574a-f799-5c76-0929e0430973\": \"Crayonic KeyVault K1 (USB-NFC-BLE FIDO2 Authenticator)\",\n    \"c1f9a0bc-1dd2-404a-b27f-8e29047a43fd\": \"YubiKey 5 FIPS Series with NFC\",\n    \"c5703116-972b-4851-a3e7-ae1259843399\": \"NEOWAVE Badgeo FIDO2\",\n    \"c5ef55ff-ad9a-4b9f-b580-adebafe026d0\": \"YubiKey 5 Series with Lightning\",\n    \"c80dbd9a-533f-4a17-b941-1a2f1c7cedff\": \"HID Crescendo C3000\",\n    \"ca4cff1b-5a81-4404-8194-59aabcf1660b\": \"IDPrime 3930 FIDO\",\n    \"ca87cb70-4c1b-4579-a8e8-4efdd7c007e0\": \"FIDO Alliance TruU Sample FIDO2 Authenticator\",\n    \"cb69481e-8ff7-4039-93ec-0a2729a154a8\": \"YubiKey 5 Series\",\n    \"cc45f64e-52a2-451b-831a-4edd8022a202\": \"ToothPic Passkey Provider\",\n    \"cd69adb5-3c7a-deb9-3177-6800ea6cb72a\": \"Thales PIN Android SDK\",\n    \"cdbdaea2-c415-5073-50f7-c04e968640b6\": \"Excelsecu eSecu FIDO2 Security Key\",\n    \"cfcb13a2-244f-4b36-9077-82b79d6a7de7\": \"USB/NFC Passcode Authenticator\",\n    \"d384db22-4d50-ebde-2eac-5765cf1e2a44\": \"Excelsecu eSecu FIDO2 Fingerprint Security Key\",\n    \"d41f5a69-b817-4144-a13c-9ebd6d9254d6\": \"ATKey.Card CTAP2.0\",\n    \"d548826e-79b4-db40-a3d8-11116f7e8349\": \"Bitwarden\",\n    \"d61d3b87-3e7c-4aea-9c50-441c371903ad\": \"KeyVault Secp256R1 FIDO2 CTAP2 Authenticator\",\n    \"d7a423ad-3e19-4492-9200-78137dccc136\": \"VivoKey Apex FIDO2\",\n    \"d821a7d4-e97c-4cb6-bd82-4237731fd4be\": \"Hyper FIDO Bio Security Key\",\n    \"d8522d9f-575b-4866-88a9-ba99fa02f35b\": \"YubiKey Bio Series\",\n    \"d91c5288-0ef0-49b7-b8ae-21ca0aa6b3f3\": \"KEY-ID FIDO2 Authenticator\",\n    \"d94a29d9-52dd-4247-9c2d-8b818b610389\": \"VeriMark Guard Fingerprint Key\",\n    \"da1fa263-8b25-42b6-a820-c0036f21ba7f\": \"ATKey.Card NFC\",\n    \"dd4ec289-e01d-41c9-bb89-70fa845d4bf2\": \"iCloud Keychain (Managed)\",\n    \"e1a96183-5016-4f24-b55b-e3ae23614cc6\": \"ATKey.Pro CTAP2.0\",\n    \"e416201b-afeb-41ca-a03d-2281c28322aa\": \"ATKey.Pro CTAP2.1\",\n    \"e77e3c64-05e3-428b-8824-0cbeb04b829d\": \"Security Key NFC by Yubico\",\n    \"e86addcd-7711-47e5-b42a-c18257b0bf61\": \"IDCore 3121 Fido\",\n    \"ea9b8d66-4d01-1d21-3ce4-b6b48cb575d4\": \"Google Password Manager\",\n    \"eabb46cc-e241-80bf-ae9e-96fa6d2975cf\": \"TOKEN2 PIN Plus Security Key Series \",\n    \"eb3b131e-59dc-536a-d176-cb7306da10f5\": \"ellipticSecure MIRkey USB Authenticator\",\n    \"ec31b4cc-2acc-4b8e-9c01-bade00ccbe26\": \"KeyXentic FIDO2 Secp256R1 FIDO2 CTAP2 Authenticator\",\n    \"ee041bce-25e5-4cdb-8f86-897fd6418464\": \"Feitian ePass FIDO2-NFC Authenticator\",\n    \"ee882879-721c-4913-9775-3dfcce97072a\": \"YubiKey 5 Series\",\n    \"efb96b10-a9ee-4b6c-a4a9-d32125ccd4a4\": \"Safenet eToken FIDO\",\n    \"f3809540-7f14-49c1-a8b3-8f813b225541\": \"Enpass\",\n    \"f4c63eff-d26c-4248-801c-3736c7eaa93a\": \"FIDO KeyPass S3\",\n    \"f56f58b3-d711-4afc-ba7d-6ac05f88cb19\": \"WinMagic FIDO Eazy - Phone\",\n    \"f7c558a0-f465-11e8-b568-0800200c9a66\": \"KONAI Secp256R1 FIDO2 Conformance Testing CTAP2 Authenticator\",\n    \"f8a011f3-8c0a-4d15-8006-17111f9edc7d\": \"Security Key by Yubico\",\n    \"fa2b99dc-9e39-4257-8f92-4a30d23c4118\": \"YubiKey 5 Series with NFC\",\n    \"fbefdf68-fe86-0106-213e-4d5fa24cbe2e\": \"Excelsecu eSecu FIDO2 NFC Security Key\",\n    \"fbfc3007-154e-4ecc-8c0b-6e020557d7bd\": \"iCloud Keychain\",\n    \"fcb1bcb4-f370-078c-6993-bc24d0ae3fbe\": \"Ledger Nano X FIDO2 Authenticator\",\n    \"fdb141b2-5d84-443e-8a35-4698c205a502\": \"KeePassXC\",\n    \"fec067a1-f1d0-4c5e-b4c0-cc3237475461\": \"KX701 SmartToken FIDO\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/authenticatorMetadata.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/client.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@passwordless-id/webauthn/dist/esm/client.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authenticate: () => (/* binding */ authenticate),\n/* harmony export */   isAutocompleteAvailable: () => (/* binding */ isAutocompleteAvailable),\n/* harmony export */   isAvailable: () => (/* binding */ isAvailable),\n/* harmony export */   isLocalAuthenticator: () => (/* binding */ isLocalAuthenticator),\n/* harmony export */   register: () => (/* binding */ register)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/utils.js\");\n\n/**\n * Returns whether passwordless authentication is available on this browser/platform or not.\n */ function isAvailable() {\n    return !!window.PublicKeyCredential;\n}\n/**\n * Returns whether the device itself can be used as authenticator.\n */ async function isLocalAuthenticator() {\n    return await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();\n}\n/**\n * Before \"hints\" were a thing, the \"authenticatorAttachment\" was the way to go.\n */ function getAuthAttachment(hints) {\n    if (!hints || hints.length === 0) return undefined; // The webauthn protocol considers `null` as invalid but `undefined` as \"both\"!\n    if (hints.includes(\"client-device\")) {\n        if (hints.includes(\"security-key\") || hints.includes(\"hybrid\")) return undefined; // both\n        else return \"platform\";\n    }\n    return \"cross-platform\";\n}\n/**\n * For autocomplete / conditional mediation, the ongoing \"authentication\" must be aborted when triggering a registration.\n * It should also be aborted when triggering authentication another time.\n */ let ongoingAuth = null;\n/**\n * Creates a cryptographic key pair, in order to register the public key for later passwordless authentication.\n *\n * @param {string|Object} [user] Username or user object (id, name, displayName)\n * @param {string} [challenge] A server-side randomly generated string.\n * @param {number} [timeout=60000] Number of milliseconds the user has to respond to the biometric/PIN check.\n * @param {'required'|'preferred'|'discouraged'} [userVerification='required'] Whether to prompt for biometric/PIN check or not.\n * @param {PublicKeyCredentialHints[]} [hints]: Can contain a list of \"client-device\", \"hybrid\" or \"security-key\"\n * @param {boolean} [attestation=false] If enabled, the device attestation and clientData will be provided as Base64url encoded binary data. Note that this is not available on some platforms.\n * @param {'discouraged'|'preferred'|'required'} [discoverable] A \"discoverable\" credential can be selected using `authenticate(...)` without providing credential IDs.\n *              Instead, a native pop-up will appear for user selection.\n *              This may have an impact on the \"passkeys\" user experience and syncing behavior of the key.\n */ async function register(options) {\n    if (!options.challenge) throw new Error('\"challenge\" required');\n    if (!options.user) throw new Error('\"user\" required');\n    if (!_utils__WEBPACK_IMPORTED_MODULE_0__.isBase64url(options.challenge)) throw new Error(\"Provided challenge is not properly encoded in Base64url\");\n    const user = typeof options.user === \"string\" ? {\n        name: options.user\n    } : options.user;\n    if (!user.id) user.id = crypto.randomUUID();\n    const creationOptions = {\n        challenge: _utils__WEBPACK_IMPORTED_MODULE_0__.parseBase64url(options.challenge),\n        rp: {\n            id: options.domain ?? window.location.hostname,\n            name: options.domain ?? window.location.hostname\n        },\n        user: {\n            id: _utils__WEBPACK_IMPORTED_MODULE_0__.toBuffer(user.id),\n            name: user.name,\n            displayName: user.displayName ?? user.name\n        },\n        hints: options.hints,\n        pubKeyCredParams: [\n            {\n                alg: -7,\n                type: \"public-key\"\n            },\n            {\n                alg: -257,\n                type: \"public-key\"\n            }\n        ],\n        timeout: options.timeout,\n        authenticatorSelection: {\n            userVerification: options.userVerification,\n            authenticatorAttachment: getAuthAttachment(options.hints),\n            residentKey: options.discoverable ?? \"preferred\",\n            requireResidentKey: options.discoverable === \"required\" // mainly for backwards compatibility, see https://www.w3.org/TR/webauthn/#dictionary-authenticatorSelection\n        },\n        attestation: \"direct\"\n    };\n    console.debug(creationOptions);\n    if (ongoingAuth != null) ongoingAuth.abort(\"Cancel ongoing authentication\");\n    ongoingAuth = new AbortController();\n    const raw = await navigator.credentials.create({\n        publicKey: creationOptions,\n        signal: ongoingAuth?.signal\n    });\n    const response = raw.response;\n    ongoingAuth = null;\n    console.debug(raw);\n    if (raw.type != \"public-key\") throw \"Unexpected credential type!\";\n    const publicKey = response.getPublicKey();\n    if (!publicKey) throw \"Non-compliant browser or authenticator!\";\n    // This should provide the same as `response.toJson()` which is sadly only available on FireFox\n    const json = {\n        type: raw.type,\n        id: raw.id,\n        rawId: _utils__WEBPACK_IMPORTED_MODULE_0__.toBase64url(raw.rawId),\n        authenticatorAttachment: raw.authenticatorAttachment,\n        clientExtensionResults: raw.getClientExtensionResults(),\n        response: {\n            attestationObject: _utils__WEBPACK_IMPORTED_MODULE_0__.toBase64url(response.attestationObject),\n            authenticatorData: _utils__WEBPACK_IMPORTED_MODULE_0__.toBase64url(response.getAuthenticatorData()),\n            clientDataJSON: _utils__WEBPACK_IMPORTED_MODULE_0__.toBase64url(response.clientDataJSON),\n            publicKey: _utils__WEBPACK_IMPORTED_MODULE_0__.toBase64url(publicKey),\n            publicKeyAlgorithm: response.getPublicKeyAlgorithm(),\n            transports: response.getTransports()\n        },\n        user\n    };\n    return json;\n}\nasync function isAutocompleteAvailable() {\n    return PublicKeyCredential.isConditionalMediationAvailable && PublicKeyCredential.isConditionalMediationAvailable();\n}\n/**\n * Signs a challenge using one of the provided credentials IDs in order to authenticate the user.\n *\n * @param {string[]} credentialIds The list of credential IDs that can be used for signing.\n * @param {string} challenge A server-side randomly generated string, the base64 encoded version will be signed.\n * @param {number} [timeout=60000] Number of milliseconds the user has to respond to the biometric/PIN check.\n * @param {'required'|'preferred'|'discouraged'} [userVerification='required'] Whether to prompt for biometric/PIN check or not.\n * @param {boolean} [conditional] Does not return directly, but only when the user has selected a credential in the input field with `autocomplete=\"username webauthn\"`\n */ async function authenticate(options) {\n    if (!_utils__WEBPACK_IMPORTED_MODULE_0__.isBase64url(options.challenge)) throw new Error(\"Provided challenge is not properly encoded in Base64url\");\n    if (options.autocomplete && !await isAutocompleteAvailable()) throw new Error(\"PAsskeys autocomplete with conditional mediation is not available in this browser.\");\n    let authOptions = {\n        challenge: _utils__WEBPACK_IMPORTED_MODULE_0__.parseBase64url(options.challenge),\n        rpId: options.domain ?? window.location.hostname,\n        allowCredentials: options.allowCredentials?.map(toPublicKeyCredentialDescriptor),\n        hints: options.hints,\n        userVerification: options.userVerification,\n        timeout: options.timeout\n    };\n    console.debug(authOptions);\n    if (ongoingAuth != null) ongoingAuth.abort(\"Cancel ongoing authentication\");\n    if (options.autocomplete) ongoingAuth = new AbortController();\n    const raw = await navigator.credentials.get({\n        publicKey: authOptions,\n        mediation: options.autocomplete ? \"conditional\" : undefined,\n        signal: ongoingAuth?.signal\n    });\n    if (raw.type != \"public-key\") throw \"Unexpected credential type!\";\n    ongoingAuth = null;\n    console.debug(raw);\n    const response = raw.response;\n    // This should provide the same as `response.toJson()` which is sadly only available on FireFox\n    const json = {\n        clientExtensionResults: raw.getClientExtensionResults(),\n        id: raw.id,\n        rawId: _utils__WEBPACK_IMPORTED_MODULE_0__.toBase64url(raw.rawId),\n        type: raw.type,\n        authenticatorAttachment: raw.authenticatorAttachment,\n        response: {\n            authenticatorData: _utils__WEBPACK_IMPORTED_MODULE_0__.toBase64url(response.authenticatorData),\n            clientDataJSON: _utils__WEBPACK_IMPORTED_MODULE_0__.toBase64url(response.clientDataJSON),\n            signature: _utils__WEBPACK_IMPORTED_MODULE_0__.toBase64url(response.signature),\n            userHandle: response.userHandle ? _utils__WEBPACK_IMPORTED_MODULE_0__.toBase64url(response.userHandle) : undefined\n        }\n    };\n    return json;\n}\nfunction toPublicKeyCredentialDescriptor(cred) {\n    if (typeof cred === \"string\") {\n        return {\n            id: _utils__WEBPACK_IMPORTED_MODULE_0__.parseBase64url(cred),\n            type: \"public-key\"\n        };\n    } else {\n        return {\n            id: _utils__WEBPACK_IMPORTED_MODULE_0__.parseBase64url(cred.id),\n            type: \"public-key\",\n            transports: cred.transports\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@passwordless-id/webauthn/dist/esm/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authenticatorMetadata: () => (/* reexport safe */ _authenticatorMetadata__WEBPACK_IMPORTED_MODULE_4__.authenticatorMetadata),\n/* harmony export */   client: () => (/* reexport module object */ _client__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   parsers: () => (/* reexport module object */ _parsers__WEBPACK_IMPORTED_MODULE_2__),\n/* harmony export */   server: () => (/* reexport module object */ _server__WEBPACK_IMPORTED_MODULE_1__),\n/* harmony export */   utils: () => (/* reexport module object */ _utils__WEBPACK_IMPORTED_MODULE_3__)\n/* harmony export */ });\n/* harmony import */ var _client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./client */ \"(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/client.js\");\n/* harmony import */ var _server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./server */ \"(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/server.js\");\n/* harmony import */ var _parsers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parsers */ \"(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/parsers.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/utils.js\");\n/* harmony import */ var _authenticatorMetadata__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./authenticatorMetadata */ \"(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/authenticatorMetadata.js\");\n\n\n\n\n\n\nconst webauthn = {\n    client: _client__WEBPACK_IMPORTED_MODULE_0__,\n    server: _server__WEBPACK_IMPORTED_MODULE_1__,\n    parsers: _parsers__WEBPACK_IMPORTED_MODULE_2__,\n    utils: _utils__WEBPACK_IMPORTED_MODULE_3__,\n    authenticatorMetadata: _authenticatorMetadata__WEBPACK_IMPORTED_MODULE_4__.authenticatorMetadata\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (webauthn);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBhc3N3b3JkbGVzcy1pZC93ZWJhdXRobi9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFtQztBQUNBO0FBQ0U7QUFDSjtBQUMrQjtBQUNDO0FBQ2pFLE1BQU1LLFdBQVc7SUFBRUwsTUFBTUEsc0NBQUFBO0lBQUVDLE1BQU1BLHNDQUFBQTtJQUFFQyxPQUFPQSx1Q0FBQUE7SUFBRUMsS0FBS0EscUNBQUFBO0lBQUVDLHFCQUFxQkEsMkVBQUFBO0FBQUM7QUFDekUsaUVBQWVDLFFBQVFBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIzZGV2Y291cnNlLy4vbm9kZV9tb2R1bGVzL0BwYXNzd29yZGxlc3MtaWQvd2ViYXV0aG4vZGlzdC9lc20vaW5kZXguanM/ZTU1NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjbGllbnQgZnJvbSAnLi9jbGllbnQnO1xuaW1wb3J0ICogYXMgc2VydmVyIGZyb20gJy4vc2VydmVyJztcbmltcG9ydCAqIGFzIHBhcnNlcnMgZnJvbSAnLi9wYXJzZXJzJztcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgYXV0aGVudGljYXRvck1ldGFkYXRhIH0gZnJvbSAnLi9hdXRoZW50aWNhdG9yTWV0YWRhdGEnO1xuZXhwb3J0IHsgY2xpZW50LCBzZXJ2ZXIsIHBhcnNlcnMsIHV0aWxzLCBhdXRoZW50aWNhdG9yTWV0YWRhdGEgfTtcbmNvbnN0IHdlYmF1dGhuID0geyBjbGllbnQsIHNlcnZlciwgcGFyc2VycywgdXRpbHMsIGF1dGhlbnRpY2F0b3JNZXRhZGF0YSB9O1xuZXhwb3J0IGRlZmF1bHQgd2ViYXV0aG47XG4iXSwibmFtZXMiOlsiY2xpZW50Iiwic2VydmVyIiwicGFyc2VycyIsInV0aWxzIiwiYXV0aGVudGljYXRvck1ldGFkYXRhIiwid2ViYXV0aG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/parsers.js":
/*!********************************************************************!*\
  !*** ./node_modules/@passwordless-id/webauthn/dist/esm/parsers.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAlgoName: () => (/* binding */ getAlgoName),\n/* harmony export */   parseAuthentication: () => (/* binding */ parseAuthentication),\n/* harmony export */   parseAuthenticator: () => (/* binding */ parseAuthenticator),\n/* harmony export */   parseClient: () => (/* binding */ parseClient),\n/* harmony export */   parseRegistration: () => (/* binding */ parseRegistration),\n/* harmony export */   toAuthenticationInfo: () => (/* binding */ toAuthenticationInfo),\n/* harmony export */   toRegistrationInfo: () => (/* binding */ toRegistrationInfo)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/utils.js\");\n/* harmony import */ var _authenticatorMetadata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./authenticatorMetadata */ \"(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/authenticatorMetadata.js\");\n\n\nconst utf8Decoder = new TextDecoder(\"utf-8\");\nfunction parseClient(data) {\n    if (typeof data == \"string\") data = _utils__WEBPACK_IMPORTED_MODULE_0__.parseBase64url(data);\n    return JSON.parse(utf8Decoder.decode(data));\n}\nfunction parseAuthenticator(authData) {\n    if (typeof authData == \"string\") authData = _utils__WEBPACK_IMPORTED_MODULE_0__.parseBase64url(authData);\n    //console.debug(authData)\n    let flags = new DataView(authData.slice(32, 33)).getUint8(0);\n    //console.debug(flags)\n    // https://w3c.github.io/webauthn/#sctn-authenticator-data\n    return {\n        rpIdHash: extractRpIdHash(authData),\n        flags: {\n            userPresent: !!(flags & 1),\n            //reserved1: !!(flags & 2),\n            userVerified: !!(flags & 4),\n            backupEligibility: !!(flags & 8),\n            backupState: !!(flags & 16),\n            //reserved2: !!(flags & 32),\n            attestedData: !!(flags & 64),\n            extensionsIncluded: !!(flags & 128)\n        },\n        signCount: new DataView(authData.slice(33, 37)).getUint32(0, false),\n        aaguid: extractAaguid(authData)\n    };\n}\nfunction extractRpIdHash(authData) {\n    return _utils__WEBPACK_IMPORTED_MODULE_0__.toBase64url(authData.slice(0, 32));\n}\n/**\n * Returns the AAGUID in the format \"00000000-0000-0000-0000-000000000000\"\n */ function extractAaguid(authData) {\n    if (authData.byteLength < 53) return \"00000000-0000-0000-0000-000000000000\";\n    const buffer = authData.slice(37, 53); // 16 byte\n    const hex = _utils__WEBPACK_IMPORTED_MODULE_0__.bufferToHex(buffer);\n    const aaguid = `${hex.substring(0, 8)}-${hex.substring(8, 12)}-${hex.substring(12, 16)}-${hex.substring(16, 20)}-${hex.substring(20, 32)}`;\n    return aaguid; // example: \"d41f5a69-b817-4144-a13c-9ebd6d9254d6\"\n}\nfunction getAlgoName(num) {\n    switch(num){\n        case -7:\n            return \"ES256\";\n        case -8:\n            return \"EdDSA\";\n        case -257:\n            return \"RS256\";\n        default:\n            throw new Error(`Unknown algorithm code: ${num}`);\n    }\n}\nfunction parseRegistration(registrationJson) {\n    const authenticator = parseAuthenticator(registrationJson.response.authenticatorData);\n    return toRegistrationInfo(registrationJson, authenticator);\n}\nfunction toRegistrationInfo(registrationJson, authenticator) {\n    const aaguid = authenticator.aaguid;\n    return {\n        authenticator: {\n            aaguid,\n            counter: authenticator.signCount,\n            icon_light: \"https://webauthn.passwordless.id/authenticators/\" + aaguid + \"-light.png\",\n            icon_dark: \"https://webauthn.passwordless.id/authenticators/\" + aaguid + \"-dark.png\",\n            name: _authenticatorMetadata__WEBPACK_IMPORTED_MODULE_1__.authenticatorMetadata[aaguid] ?? \"Unknown\"\n        },\n        credential: {\n            id: registrationJson.id,\n            publicKey: registrationJson.response.publicKey,\n            algorithm: getAlgoName(registrationJson.response.publicKeyAlgorithm),\n            transports: registrationJson.response.transports\n        },\n        synced: authenticator.flags.backupEligibility,\n        user: registrationJson.user,\n        userVerified: authenticator.flags.userVerified\n    };\n}\nfunction toAuthenticationInfo(authenticationJson, authenticator) {\n    return {\n        credentialId: authenticationJson.id,\n        userId: authenticationJson.response.userHandle,\n        counter: authenticator.signCount,\n        userVerified: authenticator.flags.userVerified,\n        authenticatorAttachment: authenticationJson.authenticatorAttachment\n    };\n}\nfunction parseAuthentication(authenticationJson) {\n    const authenticator = parseAuthenticator(authenticationJson.response.authenticatorData);\n    return toAuthenticationInfo(authenticationJson, authenticator);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/parsers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/server.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@passwordless-id/webauthn/dist/esm/server.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseCryptoKey: () => (/* binding */ parseCryptoKey),\n/* harmony export */   randomChallenge: () => (/* binding */ randomChallenge),\n/* harmony export */   verifyAuthentication: () => (/* binding */ verifyAuthentication),\n/* harmony export */   verifyRegistration: () => (/* binding */ verifyRegistration),\n/* harmony export */   verifySignature: () => (/* binding */ verifySignature)\n/* harmony export */ });\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ \"(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/index.js\");\n/* harmony import */ var _parsers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parsers */ \"(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/parsers.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/utils.js\");\n\n\n\nfunction randomChallenge() {\n    const buffer = crypto.getRandomValues(new Uint8Array(18)); // > 128 bits, a multiple of 3 bytes to have base64 encoding without padding\n    return _utils__WEBPACK_IMPORTED_MODULE_2__.toBase64url(buffer);\n}\nasync function isValid(validator, value) {\n    if (typeof validator === \"function\") {\n        const res = validator(value);\n        if (res instanceof Promise) return await res;\n        else return res;\n    }\n    // the validator can be a single value too\n    return validator === value;\n}\nasync function isNotValid(validator, value) {\n    return !await isValid(validator, value);\n}\nasync function verifyRegistration(registrationJson, expected) {\n    const client = (0,_parsers__WEBPACK_IMPORTED_MODULE_1__.parseClient)(registrationJson.response.clientDataJSON);\n    const authenticator = (0,_parsers__WEBPACK_IMPORTED_MODULE_1__.parseAuthenticator)(registrationJson.response.authenticatorData);\n    const aaguid = authenticator.aaguid;\n    if (!aaguid) throw new Error(\"Unexpected errror, no AAGUID.\");\n    if (client.type !== \"webauthn.create\") throw new Error(`Unexpected ClientData type: ${client.type}`);\n    if (await isNotValid(expected.origin, client.origin)) throw new Error(`Unexpected ClientData origin: ${client.origin}`);\n    if (await isNotValid(expected.challenge, client.challenge)) throw new Error(`Unexpected ClientData challenge: ${client.challenge}`);\n    return _index__WEBPACK_IMPORTED_MODULE_0__.parsers.toRegistrationInfo(registrationJson, authenticator);\n}\nasync function verifyAuthentication(authenticationJson, credential, expected) {\n    if (authenticationJson.id !== credential.id) throw new Error(`Credential ID mismatch: ${authenticationJson.id} vs ${credential.id}`);\n    const isValidSignature = await verifySignature({\n        algorithm: credential.algorithm,\n        publicKey: credential.publicKey,\n        authenticatorData: authenticationJson.response.authenticatorData,\n        clientData: authenticationJson.response.clientDataJSON,\n        signature: authenticationJson.response.signature,\n        verbose: expected.verbose\n    });\n    if (!isValidSignature) throw new Error(`Invalid signature: ${authenticationJson.response.signature}`);\n    const client = (0,_parsers__WEBPACK_IMPORTED_MODULE_1__.parseClient)(authenticationJson.response.clientDataJSON);\n    const authenticator = (0,_parsers__WEBPACK_IMPORTED_MODULE_1__.parseAuthenticator)(authenticationJson.response.authenticatorData);\n    if (expected.verbose) {\n        console.debug(client);\n        console.debug(authenticator);\n    }\n    if (client.type !== \"webauthn.get\") throw new Error(`Unexpected clientData type: ${client.type}`);\n    if (await isNotValid(expected.origin, client.origin)) throw new Error(`Unexpected ClientData origin: ${client.origin}`);\n    if (await isNotValid(expected.challenge, client.challenge)) throw new Error(`Unexpected ClientData challenge: ${client.challenge}`);\n    // this only works because we consider `rp.origin` and `rp.id` to be the same during authentication/registration\n    const rpId = expected.domain ?? new URL(client.origin).hostname;\n    const expectedRpIdHash = _utils__WEBPACK_IMPORTED_MODULE_2__.toBase64url(await _utils__WEBPACK_IMPORTED_MODULE_2__.sha256(_utils__WEBPACK_IMPORTED_MODULE_2__.toBuffer(rpId)));\n    if (authenticator.rpIdHash !== expectedRpIdHash) throw new Error(`Unexpected RpIdHash: ${authenticator.rpIdHash} vs ${expectedRpIdHash}`);\n    if (!authenticator.flags.userPresent) throw new Error(`Unexpected authenticator flags: missing userPresent`);\n    if (!authenticator.flags.userVerified && expected.userVerified) throw new Error(`Unexpected authenticator flags: missing userVerified`);\n    if (expected.counter && authenticator.signCount <= expected.counter) throw new Error(`Unexpected authenticator counter: ${authenticator.signCount} (should be > ${expected.counter})`);\n    return (0,_parsers__WEBPACK_IMPORTED_MODULE_1__.toAuthenticationInfo)(authenticationJson, authenticator);\n}\n// https://w3c.github.io/webauthn/#sctn-public-key-easy\n// https://www.iana.org/assignments/cose/cose.xhtml#algorithms\n/*\nUser agents MUST be able to return a non-null value for getPublicKey() when the credential public key has a COSEAlgorithmIdentifier value of:\n\n-7 (ES256), where kty is 2 (with uncompressed points) and crv is 1 (P-256).\n\n-257 (RS256).\n\n-8 (EdDSA), where crv is 6 (Ed25519).\n*/ function getAlgoParams(algorithm) {\n    switch(algorithm){\n        case \"RS256\":\n            return {\n                name: \"RSASSA-PKCS1-v1_5\",\n                hash: \"SHA-256\"\n            };\n        case \"ES256\":\n            return {\n                name: \"ECDSA\",\n                namedCurve: \"P-256\",\n                hash: \"SHA-256\"\n            };\n        // case 'EdDSA': Not supported by browsers\n        default:\n            throw new Error(`Unknown or unsupported crypto algorithm: ${algorithm}. Only 'RS256' and 'ES256' are supported.`);\n    }\n}\nasync function parseCryptoKey(algorithm, publicKey) {\n    const algoParams = getAlgoParams(algorithm);\n    const buffer = _utils__WEBPACK_IMPORTED_MODULE_2__.parseBase64url(publicKey);\n    return crypto.subtle.importKey(\"spki\", buffer, algoParams, false, [\n        \"verify\"\n    ]);\n}\n// https://w3c.github.io/webauthn/#sctn-verifying-assertion\n// https://w3c.github.io/webauthn/#sctn-signature-attestation-types\n/* Emphasis mine:\n\n6.5.6. Signature Formats for Packed Attestation, FIDO U2F Attestation, and **Assertion Signatures**\n\n[...] For COSEAlgorithmIdentifier -7 (ES256) [...] the sig value MUST be encoded as an ASN.1 [...]\n[...] For COSEAlgorithmIdentifier -257 (RS256) [...] The signature is not ASN.1 wrapped.\n[...] For COSEAlgorithmIdentifier -37 (PS256) [...] The signature is not ASN.1 wrapped.\n*/ // see also https://gist.github.com/philholden/50120652bfe0498958fd5926694ba354\nasync function verifySignature({ algorithm, publicKey, authenticatorData, clientData, signature, verbose }) {\n    let cryptoKey = await parseCryptoKey(algorithm, publicKey);\n    if (verbose) {\n        console.debug(cryptoKey);\n    }\n    let clientHash = await _utils__WEBPACK_IMPORTED_MODULE_2__.sha256(_utils__WEBPACK_IMPORTED_MODULE_2__.parseBase64url(clientData));\n    // during \"login\", the authenticatorData is exactly 37 bytes\n    let comboBuffer = _utils__WEBPACK_IMPORTED_MODULE_2__.concatenateBuffers(_utils__WEBPACK_IMPORTED_MODULE_2__.parseBase64url(authenticatorData), clientHash);\n    if (verbose) {\n        console.debug(\"Algorithm: \" + algorithm);\n        console.debug(\"Public key: \" + publicKey);\n        console.debug(\"Data: \" + _utils__WEBPACK_IMPORTED_MODULE_2__.toBase64url(comboBuffer));\n        console.debug(\"Signature: \" + signature);\n    }\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/verify\n    let signatureBuffer = _utils__WEBPACK_IMPORTED_MODULE_2__.parseBase64url(signature);\n    if (algorithm == \"ES256\") signatureBuffer = convertASN1toRaw(signatureBuffer);\n    const algoParams = getAlgoParams(algorithm);\n    const isValid = await crypto.subtle.verify(algoParams, cryptoKey, signatureBuffer, comboBuffer);\n    return isValid;\n}\nfunction convertASN1toRaw(signatureBuffer) {\n    // Convert signature from ASN.1 sequence to \"raw\" format\n    const signature = new Uint8Array(signatureBuffer);\n    const rStart = signature[4] === 0 ? 5 : 4;\n    const rEnd = rStart + 32;\n    const sStart = signature[rEnd + 2] === 0 ? rEnd + 3 : rEnd + 2;\n    const r = signature.slice(rStart, rEnd);\n    const s = signature.slice(sStart);\n    return new Uint8Array([\n        ...r,\n        ...s\n    ]);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/server.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/utils.js":
/*!******************************************************************!*\
  !*** ./node_modules/@passwordless-id/webauthn/dist/esm/utils.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bufferToHex: () => (/* binding */ bufferToHex),\n/* harmony export */   concatenateBuffers: () => (/* binding */ concatenateBuffers),\n/* harmony export */   isBase64url: () => (/* binding */ isBase64url),\n/* harmony export */   parseBase64url: () => (/* binding */ parseBase64url),\n/* harmony export */   parseBuffer: () => (/* binding */ parseBuffer),\n/* harmony export */   sha256: () => (/* binding */ sha256),\n/* harmony export */   toBase64url: () => (/* binding */ toBase64url),\n/* harmony export */   toBuffer: () => (/* binding */ toBuffer)\n/* harmony export */ });\n/********************************\n     Encoding/Decoding Utils\n********************************/ function toBuffer(txt) {\n    return Uint8Array.from(txt, (c)=>c.charCodeAt(0)).buffer;\n}\nfunction parseBuffer(buffer) {\n    return String.fromCharCode(...new Uint8Array(buffer));\n}\nfunction isBase64url(txt) {\n    return txt.match(/^[a-zA-Z0-9\\-_]+=*$/) !== null;\n}\nfunction toBase64url(buffer) {\n    const txt = btoa(parseBuffer(buffer)); // base64\n    return txt.replaceAll(\"+\", \"-\").replaceAll(\"/\", \"_\");\n}\nfunction parseBase64url(txt) {\n    txt = txt.replaceAll(\"-\", \"+\").replaceAll(\"_\", \"/\"); // base64url -> base64\n    return toBuffer(atob(txt));\n}\nasync function sha256(buffer) {\n    return await crypto.subtle.digest(\"SHA-256\", buffer);\n}\nfunction bufferToHex(buffer) {\n    return [\n        ...new Uint8Array(buffer)\n    ].map((b)=>b.toString(16).padStart(2, \"0\")).join(\"\");\n}\nfunction concatenateBuffers(buffer1, buffer2) {\n    var tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n    tmp.set(new Uint8Array(buffer1), 0);\n    tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n    return tmp;\n}\n;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBhc3N3b3JkbGVzcy1pZC93ZWJhdXRobi9kaXN0L2VzbS91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOzsrQkFFK0IsR0FDeEIsU0FBU0EsU0FBU0MsR0FBRztJQUN4QixPQUFPQyxXQUFXQyxJQUFJLENBQUNGLEtBQUtHLENBQUFBLElBQUtBLEVBQUVDLFVBQVUsQ0FBQyxJQUFJQyxNQUFNO0FBQzVEO0FBQ08sU0FBU0MsWUFBWUQsTUFBTTtJQUM5QixPQUFPRSxPQUFPQyxZQUFZLElBQUksSUFBSVAsV0FBV0k7QUFDakQ7QUFDTyxTQUFTSSxZQUFZVCxHQUFHO0lBQzNCLE9BQU9BLElBQUlVLEtBQUssQ0FBQywyQkFBMkI7QUFDaEQ7QUFDTyxTQUFTQyxZQUFZTixNQUFNO0lBQzlCLE1BQU1MLE1BQU1ZLEtBQUtOLFlBQVlELFVBQVUsU0FBUztJQUNoRCxPQUFPTCxJQUFJYSxVQUFVLENBQUMsS0FBSyxLQUFLQSxVQUFVLENBQUMsS0FBSztBQUNwRDtBQUNPLFNBQVNDLGVBQWVkLEdBQUc7SUFDOUJBLE1BQU1BLElBQUlhLFVBQVUsQ0FBQyxLQUFLLEtBQUtBLFVBQVUsQ0FBQyxLQUFLLE1BQU0sc0JBQXNCO0lBQzNFLE9BQU9kLFNBQVNnQixLQUFLZjtBQUN6QjtBQUNPLGVBQWVnQixPQUFPWCxNQUFNO0lBQy9CLE9BQU8sTUFBTVksT0FBT0MsTUFBTSxDQUFDQyxNQUFNLENBQUMsV0FBV2Q7QUFDakQ7QUFDTyxTQUFTZSxZQUFZZixNQUFNO0lBQzlCLE9BQU87V0FBSSxJQUFJSixXQUFXSTtLQUFRLENBQzdCZ0IsR0FBRyxDQUFDQyxDQUFBQSxJQUFLQSxFQUFFQyxRQUFRLENBQUMsSUFBSUMsUUFBUSxDQUFDLEdBQUcsTUFDcENDLElBQUksQ0FBQztBQUNkO0FBQ08sU0FBU0MsbUJBQW1CQyxPQUFPLEVBQUVDLE9BQU87SUFDL0MsSUFBSUMsTUFBTSxJQUFJNUIsV0FBVzBCLFFBQVFHLFVBQVUsR0FBR0YsUUFBUUUsVUFBVTtJQUNoRUQsSUFBSUUsR0FBRyxDQUFDLElBQUk5QixXQUFXMEIsVUFBVTtJQUNqQ0UsSUFBSUUsR0FBRyxDQUFDLElBQUk5QixXQUFXMkIsVUFBVUQsUUFBUUcsVUFBVTtJQUNuRCxPQUFPRDtBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViM2RldmNvdXJzZS8uL25vZGVfbW9kdWxlcy9AcGFzc3dvcmRsZXNzLWlkL3dlYmF1dGhuL2Rpc3QvZXNtL3V0aWxzLmpzPzg5MmUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgIEVuY29kaW5nL0RlY29kaW5nIFV0aWxzXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0J1ZmZlcih0eHQpIHtcbiAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKHR4dCwgYyA9PiBjLmNoYXJDb2RlQXQoMCkpLmJ1ZmZlcjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUJ1ZmZlcihidWZmZXIpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSguLi5uZXcgVWludDhBcnJheShidWZmZXIpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0Jhc2U2NHVybCh0eHQpIHtcbiAgICByZXR1cm4gdHh0Lm1hdGNoKC9eW2EtekEtWjAtOVxcLV9dKz0qJC8pICE9PSBudWxsO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRvQmFzZTY0dXJsKGJ1ZmZlcikge1xuICAgIGNvbnN0IHR4dCA9IGJ0b2EocGFyc2VCdWZmZXIoYnVmZmVyKSk7IC8vIGJhc2U2NFxuICAgIHJldHVybiB0eHQucmVwbGFjZUFsbCgnKycsICctJykucmVwbGFjZUFsbCgnLycsICdfJyk7XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VCYXNlNjR1cmwodHh0KSB7XG4gICAgdHh0ID0gdHh0LnJlcGxhY2VBbGwoJy0nLCAnKycpLnJlcGxhY2VBbGwoJ18nLCAnLycpOyAvLyBiYXNlNjR1cmwgLT4gYmFzZTY0XG4gICAgcmV0dXJuIHRvQnVmZmVyKGF0b2IodHh0KSk7XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2hhMjU2KGJ1ZmZlcikge1xuICAgIHJldHVybiBhd2FpdCBjcnlwdG8uc3VidGxlLmRpZ2VzdCgnU0hBLTI1NicsIGJ1ZmZlcik7XG59XG5leHBvcnQgZnVuY3Rpb24gYnVmZmVyVG9IZXgoYnVmZmVyKSB7XG4gICAgcmV0dXJuIFsuLi5uZXcgVWludDhBcnJheShidWZmZXIpXVxuICAgICAgICAubWFwKGIgPT4gYi50b1N0cmluZygxNikucGFkU3RhcnQoMiwgXCIwXCIpKVxuICAgICAgICAuam9pbihcIlwiKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb25jYXRlbmF0ZUJ1ZmZlcnMoYnVmZmVyMSwgYnVmZmVyMikge1xuICAgIHZhciB0bXAgPSBuZXcgVWludDhBcnJheShidWZmZXIxLmJ5dGVMZW5ndGggKyBidWZmZXIyLmJ5dGVMZW5ndGgpO1xuICAgIHRtcC5zZXQobmV3IFVpbnQ4QXJyYXkoYnVmZmVyMSksIDApO1xuICAgIHRtcC5zZXQobmV3IFVpbnQ4QXJyYXkoYnVmZmVyMiksIGJ1ZmZlcjEuYnl0ZUxlbmd0aCk7XG4gICAgcmV0dXJuIHRtcDtcbn1cbjtcbiJdLCJuYW1lcyI6WyJ0b0J1ZmZlciIsInR4dCIsIlVpbnQ4QXJyYXkiLCJmcm9tIiwiYyIsImNoYXJDb2RlQXQiLCJidWZmZXIiLCJwYXJzZUJ1ZmZlciIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImlzQmFzZTY0dXJsIiwibWF0Y2giLCJ0b0Jhc2U2NHVybCIsImJ0b2EiLCJyZXBsYWNlQWxsIiwicGFyc2VCYXNlNjR1cmwiLCJhdG9iIiwic2hhMjU2IiwiY3J5cHRvIiwic3VidGxlIiwiZGlnZXN0IiwiYnVmZmVyVG9IZXgiLCJtYXAiLCJiIiwidG9TdHJpbmciLCJwYWRTdGFydCIsImpvaW4iLCJjb25jYXRlbmF0ZUJ1ZmZlcnMiLCJidWZmZXIxIiwiYnVmZmVyMiIsInRtcCIsImJ5dGVMZW5ndGgiLCJzZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@passwordless-id/webauthn/dist/esm/utils.js\n");

/***/ })

};
;