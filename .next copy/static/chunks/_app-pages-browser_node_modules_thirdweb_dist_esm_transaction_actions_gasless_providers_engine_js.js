"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_thirdweb_dist_esm_transaction_actions_gasless_providers_engine_js"],{

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/transaction/actions/gasless/providers/engine.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/transaction/actions/gasless/providers/engine.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prepareEngineTransaction: function() { return /* binding */ prepareEngineTransaction; },\n/* harmony export */   relayEngineTransaction: function() { return /* binding */ relayEngineTransaction; }\n/* harmony export */ });\n/* harmony import */ var _contract_contract_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../contract/contract.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/contract/contract.js\");\n/* harmony import */ var _utils_json_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../utils/json.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/json.js\");\n/* harmony import */ var _read_contract_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../read-contract.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/transaction/read-contract.js\");\n/* harmony import */ var _wait_for_tx_receipt_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../wait-for-tx-receipt.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/transaction/actions/wait-for-tx-receipt.js\");\n\n\n\n\n/**\n * @internal - only exported for testing\n */ async function prepareEngineTransaction(param) {\n    let { account, serializableTransaction, transaction, gasless } = param;\n    const forrwaderContract = (0,_contract_contract_js__WEBPACK_IMPORTED_MODULE_0__.getContract)({\n        address: gasless.relayerForwarderAddress,\n        chain: transaction.chain,\n        client: transaction.client\n    });\n    const nonce = await (0,_read_contract_js__WEBPACK_IMPORTED_MODULE_1__.readContract)({\n        contract: forrwaderContract,\n        method: \"function getNonce(address) view returns (uint256)\",\n        params: [\n            account.address\n        ]\n    });\n    const [signature, message] = await (async ()=>{\n        // TODO: handle special case for `approve` -> `permit` transactions\n        if (!serializableTransaction.to) {\n            throw new Error(\"engine transactions must have a 'to' address\");\n        }\n        if (!serializableTransaction.gas) {\n            throw new Error(\"engine transactions must have a 'gas' value\");\n        }\n        if (!serializableTransaction.data) {\n            throw new Error(\"engine transactions must have a 'data' value\");\n        }\n        // chainless support!\n        if (gasless.experimentalChainlessSupport) {\n            const message = {\n                from: account.address,\n                to: serializableTransaction.to,\n                value: 0n,\n                gas: serializableTransaction.gas,\n                nonce: nonce,\n                data: serializableTransaction.data,\n                chainid: BigInt(transaction.chain.id)\n            };\n            return [\n                await account.signTypedData({\n                    domain: {\n                        name: \"GSNv2 Forwarder\",\n                        version: \"0.0.1\",\n                        verifyingContract: forrwaderContract.address\n                    },\n                    message,\n                    primaryType: \"ForwardRequest\",\n                    types: {\n                        ForwardRequest: ChainAwareForwardRequest\n                    }\n                }),\n                message\n            ];\n        }\n        // else non-chainless support\n        const message = {\n            from: account.address,\n            to: serializableTransaction.to,\n            value: 0n,\n            gas: serializableTransaction.gas,\n            nonce: nonce,\n            data: serializableTransaction.data\n        };\n        var _gasless_domainName, _gasless_domainVersion;\n        return [\n            await account.signTypedData({\n                domain: {\n                    name: (_gasless_domainName = gasless.domainName) !== null && _gasless_domainName !== void 0 ? _gasless_domainName : \"GSNv2 Forwarder\",\n                    version: (_gasless_domainVersion = gasless.domainVersion) !== null && _gasless_domainVersion !== void 0 ? _gasless_domainVersion : \"0.0.1\",\n                    chainId: transaction.chain.id,\n                    verifyingContract: forrwaderContract.address\n                },\n                message,\n                primaryType: \"ForwardRequest\",\n                types: {\n                    ForwardRequest\n                }\n            }),\n            message\n        ];\n    })();\n    // TODO: handle special case for `approve` -> `permit`\n    const messageType = \"forward\";\n    return {\n        message,\n        signature,\n        messageType\n    };\n}\nconst ForwardRequest = [\n    {\n        name: \"from\",\n        type: \"address\"\n    },\n    {\n        name: \"to\",\n        type: \"address\"\n    },\n    {\n        name: \"value\",\n        type: \"uint256\"\n    },\n    {\n        name: \"gas\",\n        type: \"uint256\"\n    },\n    {\n        name: \"nonce\",\n        type: \"uint256\"\n    },\n    {\n        name: \"data\",\n        type: \"bytes\"\n    }\n];\nconst ChainAwareForwardRequest = [\n    {\n        name: \"from\",\n        type: \"address\"\n    },\n    {\n        name: \"to\",\n        type: \"address\"\n    },\n    {\n        name: \"value\",\n        type: \"uint256\"\n    },\n    {\n        name: \"gas\",\n        type: \"uint256\"\n    },\n    {\n        name: \"nonce\",\n        type: \"uint256\"\n    },\n    {\n        name: \"data\",\n        type: \"bytes\"\n    },\n    {\n        name: \"chainid\",\n        type: \"uint256\"\n    }\n];\n/**\n * @internal\n */ async function relayEngineTransaction(options) {\n    const { message, messageType, signature } = await prepareEngineTransaction(options);\n    const response = await fetch(options.gasless.relayerUrl, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: (0,_utils_json_js__WEBPACK_IMPORTED_MODULE_2__.stringify)({\n            request: message,\n            type: messageType,\n            signature,\n            forwarderAddress: options.gasless.relayerForwarderAddress\n        })\n    });\n    if (!response.ok) {\n        throw new Error(\"Failed to send transaction: \".concat(await response.text()));\n    }\n    const json = await response.json();\n    if (!json.result) {\n        throw new Error(\"Relay transaction failed: \".concat(json.message));\n    }\n    const queueId = json.result.queueId;\n    // poll for transactionHash\n    const timeout = 60000;\n    const interval = 1000;\n    const endtime = Date.now() + timeout;\n    while(Date.now() < endtime){\n        const receipt = await fetchReceipt({\n            options,\n            queueId\n        });\n        if (receipt) {\n            return {\n                transactionHash: receipt.transactionHash,\n                chain: options.transaction.chain,\n                client: options.transaction.client\n            };\n        }\n        await new Promise((resolve)=>setTimeout(resolve, interval));\n    }\n    throw new Error(\"Failed to find relayed transaction after \".concat(timeout, \"ms\"));\n}\nasync function fetchReceipt(args) {\n    const { options, queueId } = args;\n    const url = options.gasless.relayerUrl.split(\"/relayer/\")[0];\n    const res = await fetch(\"\".concat(url, \"/transaction/status/\").concat(queueId), {\n        method: \"GET\"\n    });\n    const resJson = await res.json();\n    if (!res.ok) {\n        return null;\n    }\n    const result = resJson.result;\n    if (!result) {\n        return null;\n    }\n    switch(result.status){\n        case \"errored\":\n            throw new Error(\"Transaction errored with reason: \".concat(result.errorMessage));\n        case \"cancelled\":\n            throw new Error(\"Transaction execution cancelled.\");\n        case \"mined\":\n            {\n                const receipt = await (0,_wait_for_tx_receipt_js__WEBPACK_IMPORTED_MODULE_3__.waitForReceipt)({\n                    client: options.transaction.client,\n                    chain: options.transaction.chain,\n                    transactionHash: result.transactionHash\n                });\n                return receipt;\n            }\n        default:\n            {\n                return null;\n            }\n    }\n} //# sourceMappingURL=engine.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS90cmFuc2FjdGlvbi9hY3Rpb25zL2dhc2xlc3MvcHJvdmlkZXJzL2VuZ2luZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBK0Q7QUFDVDtBQUNHO0FBQ007QUFDL0Q7O0NBRUMsR0FDTSxlQUFlSSx5QkFBeUIsS0FBMkQ7UUFBM0QsRUFBRUMsT0FBTyxFQUFFQyx1QkFBdUIsRUFBRUMsV0FBVyxFQUFFQyxPQUFPLEVBQUcsR0FBM0Q7SUFDM0MsTUFBTUMsb0JBQW9CVCxrRUFBV0EsQ0FBQztRQUNsQ1UsU0FBU0YsUUFBUUcsdUJBQXVCO1FBQ3hDQyxPQUFPTCxZQUFZSyxLQUFLO1FBQ3hCQyxRQUFRTixZQUFZTSxNQUFNO0lBQzlCO0lBQ0EsTUFBTUMsUUFBUSxNQUFNWiwrREFBWUEsQ0FBQztRQUM3QmEsVUFBVU47UUFDVk8sUUFBUTtRQUNSQyxRQUFRO1lBQUNaLFFBQVFLLE9BQU87U0FBQztJQUM3QjtJQUNBLE1BQU0sQ0FBQ1EsV0FBV0MsUUFBUSxHQUFHLE1BQU0sQ0FBQztRQUNoQyxtRUFBbUU7UUFDbkUsSUFBSSxDQUFDYix3QkFBd0JjLEVBQUUsRUFBRTtZQUM3QixNQUFNLElBQUlDLE1BQU07UUFDcEI7UUFDQSxJQUFJLENBQUNmLHdCQUF3QmdCLEdBQUcsRUFBRTtZQUM5QixNQUFNLElBQUlELE1BQU07UUFDcEI7UUFDQSxJQUFJLENBQUNmLHdCQUF3QmlCLElBQUksRUFBRTtZQUMvQixNQUFNLElBQUlGLE1BQU07UUFDcEI7UUFDQSxxQkFBcUI7UUFDckIsSUFBSWIsUUFBUWdCLDRCQUE0QixFQUFFO1lBQ3RDLE1BQU1MLFVBQVU7Z0JBQ1pNLE1BQU1wQixRQUFRSyxPQUFPO2dCQUNyQlUsSUFBSWQsd0JBQXdCYyxFQUFFO2dCQUM5Qk0sT0FBTyxFQUFFO2dCQUNUSixLQUFLaEIsd0JBQXdCZ0IsR0FBRztnQkFDaENSLE9BQU9BO2dCQUNQUyxNQUFN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TUFBTSxJQUFJckQsTUFBTSxvQ0FBd0QsT0FBcEJtQyxPQUFPbUIsWUFBWTtRQUMzRSxLQUFLO1lBQ0QsTUFBTSxJQUFJdEQsTUFBTTtRQUNwQixLQUFLO1lBQVM7Z0JBQ1YsTUFBTTBDLFVBQVUsTUFBTTVELHVFQUFjQSxDQUFDO29CQUNqQ1UsUUFBUWdDLFFBQVF0QyxXQUFXLENBQUNNLE1BQU07b0JBQ2xDRCxPQUFPaUMsUUFBUXRDLFdBQVcsQ0FBQ0ssS0FBSztvQkFDaENxRCxpQkFBaUJULE9BQU9TLGVBQWU7Z0JBQzNDO2dCQUNBLE9BQU9GO1lBQ1g7UUFDQTtZQUFTO2dCQUNMLE9BQU87WUFDWDtJQUNKO0FBQ0osRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RoaXJkd2ViL2Rpc3QvZXNtL3RyYW5zYWN0aW9uL2FjdGlvbnMvZ2FzbGVzcy9wcm92aWRlcnMvZW5naW5lLmpzP2VhMzgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0Q29udHJhY3QgfSBmcm9tIFwiLi4vLi4vLi4vLi4vY29udHJhY3QvY29udHJhY3QuanNcIjtcbmltcG9ydCB7IHN0cmluZ2lmeSB9IGZyb20gXCIuLi8uLi8uLi8uLi91dGlscy9qc29uLmpzXCI7XG5pbXBvcnQgeyByZWFkQ29udHJhY3QgfSBmcm9tIFwiLi4vLi4vLi4vcmVhZC1jb250cmFjdC5qc1wiO1xuaW1wb3J0IHsgd2FpdEZvclJlY2VpcHQsIH0gZnJvbSBcIi4uLy4uL3dhaXQtZm9yLXR4LXJlY2VpcHQuanNcIjtcbi8qKlxuICogQGludGVybmFsIC0gb25seSBleHBvcnRlZCBmb3IgdGVzdGluZ1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJlcGFyZUVuZ2luZVRyYW5zYWN0aW9uKHsgYWNjb3VudCwgc2VyaWFsaXphYmxlVHJhbnNhY3Rpb24sIHRyYW5zYWN0aW9uLCBnYXNsZXNzLCB9KSB7XG4gICAgY29uc3QgZm9ycndhZGVyQ29udHJhY3QgPSBnZXRDb250cmFjdCh7XG4gICAgICAgIGFkZHJlc3M6IGdhc2xlc3MucmVsYXllckZvcndhcmRlckFkZHJlc3MsXG4gICAgICAgIGNoYWluOiB0cmFuc2FjdGlvbi5jaGFpbixcbiAgICAgICAgY2xpZW50OiB0cmFuc2FjdGlvbi5jbGllbnQsXG4gICAgfSk7XG4gICAgY29uc3Qgbm9uY2UgPSBhd2FpdCByZWFkQ29udHJhY3Qoe1xuICAgICAgICBjb250cmFjdDogZm9ycndhZGVyQ29udHJhY3QsXG4gICAgICAgIG1ldGhvZDogXCJmdW5jdGlvbiBnZXROb25jZShhZGRyZXNzKSB2aWV3IHJldHVybnMgKHVpbnQyNTYpXCIsXG4gICAgICAgIHBhcmFtczogW2FjY291bnQuYWRkcmVzc10sXG4gICAgfSk7XG4gICAgY29uc3QgW3NpZ25hdHVyZSwgbWVzc2FnZV0gPSBhd2FpdCAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAvLyBUT0RPOiBoYW5kbGUgc3BlY2lhbCBjYXNlIGZvciBgYXBwcm92ZWAgLT4gYHBlcm1pdGAgdHJhbnNhY3Rpb25zXG4gICAgICAgIGlmICghc2VyaWFsaXphYmxlVHJhbnNhY3Rpb24udG8pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImVuZ2luZSB0cmFuc2FjdGlvbnMgbXVzdCBoYXZlIGEgJ3RvJyBhZGRyZXNzXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc2VyaWFsaXphYmxlVHJhbnNhY3Rpb24uZ2FzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJlbmdpbmUgdHJhbnNhY3Rpb25zIG11c3QgaGF2ZSBhICdnYXMnIHZhbHVlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc2VyaWFsaXphYmxlVHJhbnNhY3Rpb24uZGF0YSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZW5naW5lIHRyYW5zYWN0aW9ucyBtdXN0IGhhdmUgYSAnZGF0YScgdmFsdWVcIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2hhaW5sZXNzIHN1cHBvcnQhXG4gICAgICAgIGlmIChnYXNsZXNzLmV4cGVyaW1lbnRhbENoYWlubGVzc1N1cHBvcnQpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB7XG4gICAgICAgICAgICAgICAgZnJvbTogYWNjb3VudC5hZGRyZXNzLFxuICAgICAgICAgICAgICAgIHRvOiBzZXJpYWxpemFibGVUcmFuc2FjdGlvbi50byxcbiAgICAgICAgICAgICAgICB2YWx1ZTogMG4sXG4gICAgICAgICAgICAgICAgZ2FzOiBzZXJpYWxpemFibGVUcmFuc2FjdGlvbi5nYXMsXG4gICAgICAgICAgICAgICAgbm9uY2U6IG5vbmNlLFxuICAgICAgICAgICAgICAgIGRhdGE6IHNlcmlhbGl6YWJsZVRyYW5zYWN0aW9uLmRhdGEsXG4gICAgICAgICAgICAgICAgY2hhaW5pZDogQmlnSW50KHRyYW5zYWN0aW9uLmNoYWluLmlkKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIGF3YWl0IGFjY291bnQuc2lnblR5cGVkRGF0YSh7XG4gICAgICAgICAgICAgICAgICAgIGRvbWFpbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJHU052MiBGb3J3YXJkZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnNpb246IFwiMC4wLjFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcmlmeWluZ0NvbnRyYWN0OiBmb3Jyd2FkZXJDb250cmFjdC5hZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICBwcmltYXJ5VHlwZTogXCJGb3J3YXJkUmVxdWVzdFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlczogeyBGb3J3YXJkUmVxdWVzdDogQ2hhaW5Bd2FyZUZvcndhcmRSZXF1ZXN0IH0sXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgLy8gZWxzZSBub24tY2hhaW5sZXNzIHN1cHBvcnRcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IHtcbiAgICAgICAgICAgIGZyb206IGFjY291bnQuYWRkcmVzcyxcbiAgICAgICAgICAgIHRvOiBzZXJpYWxpemFibGVUcmFuc2FjdGlvbi50byxcbiAgICAgICAgICAgIHZhbHVlOiAwbixcbiAgICAgICAgICAgIGdhczogc2VyaWFsaXphYmxlVHJhbnNhY3Rpb24uZ2FzLFxuICAgICAgICAgICAgbm9uY2U6IG5vbmNlLFxuICAgICAgICAgICAgZGF0YTogc2VyaWFsaXphYmxlVHJhbnNhY3Rpb24uZGF0YSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIGF3YWl0IGFjY291bnQuc2lnblR5cGVkRGF0YSh7XG4gICAgICAgICAgICAgICAgZG9tYWluOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGdhc2xlc3MuZG9tYWluTmFtZSA/PyBcIkdTTnYyIEZvcndhcmRlclwiLFxuICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uOiBnYXNsZXNzLmRvbWFpblZlcnNpb24gPz8gXCIwLjAuMVwiLFxuICAgICAgICAgICAgICAgICAgICBjaGFpbklkOiB0cmFuc2FjdGlvbi5jaGFpbi5pZCxcbiAgICAgICAgICAgICAgICAgICAgdmVyaWZ5aW5nQ29udHJhY3Q6IGZvcnJ3YWRlckNvbnRyYWN0LmFkZHJlc3MsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICAgICAgICAgIHByaW1hcnlUeXBlOiBcIkZvcndhcmRSZXF1ZXN0XCIsXG4gICAgICAgICAgICAgICAgdHlwZXM6IHsgRm9yd2FyZFJlcXVlc3QgfSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgXTtcbiAgICB9KSgpO1xuICAgIC8vIFRPRE86IGhhbmRsZSBzcGVjaWFsIGNhc2UgZm9yIGBhcHByb3ZlYCAtPiBgcGVybWl0YFxuICAgIGNvbnN0IG1lc3NhZ2VUeXBlID0gXCJmb3J3YXJkXCI7XG4gICAgcmV0dXJuIHsgbWVzc2FnZSwgc2lnbmF0dXJlLCBtZXNzYWdlVHlwZSB9O1xufVxuY29uc3QgRm9yd2FyZFJlcXVlc3QgPSBbXG4gICAgeyBuYW1lOiBcImZyb21cIiwgdHlwZTogXCJhZGRyZXNzXCIgfSxcbiAgICB7IG5hbWU6IFwidG9cIiwgdHlwZTogXCJhZGRyZXNzXCIgfSxcbiAgICB7IG5hbWU6IFwidmFsdWVcIiwgdHlwZTogXCJ1aW50MjU2XCIgfSxcbiAgICB7IG5hbWU6IFwiZ2FzXCIsIHR5cGU6IFwidWludDI1NlwiIH0sXG4gICAgeyBuYW1lOiBcIm5vbmNlXCIsIHR5cGU6IFwidWludDI1NlwiIH0sXG4gICAgeyBuYW1lOiBcImRhdGFcIiwgdHlwZTogXCJieXRlc1wiIH0sXG5dO1xuY29uc3QgQ2hhaW5Bd2FyZUZvcndhcmRSZXF1ZXN0ID0gW1xuICAgIHsgbmFtZTogXCJmcm9tXCIsIHR5cGU6IFwiYWRkcmVzc1wiIH0sXG4gICAgeyBuYW1lOiBcInRvXCIsIHR5cGU6IFwiYWRkcmVzc1wiIH0sXG4gICAgeyBuYW1lOiBcInZhbHVlXCIsIHR5cGU6IFwidWludDI1NlwiIH0sXG4gICAgeyBuYW1lOiBcImdhc1wiLCB0eXBlOiBcInVpbnQyNTZcIiB9LFxuICAgIHsgbmFtZTogXCJub25jZVwiLCB0eXBlOiBcInVpbnQyNTZcIiB9LFxuICAgIHsgbmFtZTogXCJkYXRhXCIsIHR5cGU6IFwiYnl0ZXNcIiB9LFxuICAgIHsgbmFtZTogXCJjaGFpbmlkXCIsIHR5cGU6IFwidWludDI1NlwiIH0sXG5dO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlbGF5RW5naW5lVHJhbnNhY3Rpb24ob3B0aW9ucykge1xuICAgIGNvbnN0IHsgbWVzc2FnZSwgbWVzc2FnZVR5cGUsIHNpZ25hdHVyZSB9ID0gYXdhaXQgcHJlcGFyZUVuZ2luZVRyYW5zYWN0aW9uKG9wdGlvbnMpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2gob3B0aW9ucy5nYXNsZXNzLnJlbGF5ZXJVcmwsIHtcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6IHN0cmluZ2lmeSh7XG4gICAgICAgICAgICByZXF1ZXN0OiBtZXNzYWdlLFxuICAgICAgICAgICAgdHlwZTogbWVzc2FnZVR5cGUsXG4gICAgICAgICAgICBzaWduYXR1cmUsXG4gICAgICAgICAgICBmb3J3YXJkZXJBZGRyZXNzOiBvcHRpb25zLmdhc2xlc3MucmVsYXllckZvcndhcmRlckFkZHJlc3MsXG4gICAgICAgIH0pLFxuICAgIH0pO1xuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gc2VuZCB0cmFuc2FjdGlvbjogJHthd2FpdCByZXNwb25zZS50ZXh0KCl9YCk7XG4gICAgfVxuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgaWYgKCFqc29uLnJlc3VsdCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFJlbGF5IHRyYW5zYWN0aW9uIGZhaWxlZDogJHtqc29uLm1lc3NhZ2V9YCk7XG4gICAgfVxuICAgIGNvbnN0IHF1ZXVlSWQgPSBqc29uLnJlc3VsdC5xdWV1ZUlkO1xuICAgIC8vIHBvbGwgZm9yIHRyYW5zYWN0aW9uSGFzaFxuICAgIGNvbnN0IHRpbWVvdXQgPSA2MDAwMDtcbiAgICBjb25zdCBpbnRlcnZhbCA9IDEwMDA7XG4gICAgY29uc3QgZW5kdGltZSA9IERhdGUubm93KCkgKyB0aW1lb3V0O1xuICAgIHdoaWxlIChEYXRlLm5vdygpIDwgZW5kdGltZSkge1xuICAgICAgICBjb25zdCByZWNlaXB0ID0gYXdhaXQgZmV0Y2hSZWNlaXB0KHsgb3B0aW9ucywgcXVldWVJZCB9KTtcbiAgICAgICAgaWYgKHJlY2VpcHQpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25IYXNoOiByZWNlaXB0LnRyYW5zYWN0aW9uSGFzaCxcbiAgICAgICAgICAgICAgICBjaGFpbjogb3B0aW9ucy50cmFuc2FjdGlvbi5jaGFpbixcbiAgICAgICAgICAgICAgICBjbGllbnQ6IG9wdGlvbnMudHJhbnNhY3Rpb24uY2xpZW50LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCBpbnRlcnZhbCkpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBmaW5kIHJlbGF5ZWQgdHJhbnNhY3Rpb24gYWZ0ZXIgJHt0aW1lb3V0fW1zYCk7XG59XG5hc3luYyBmdW5jdGlvbiBmZXRjaFJlY2VpcHQoYXJncykge1xuICAgIGNvbnN0IHsgb3B0aW9ucywgcXVldWVJZCB9ID0gYXJncztcbiAgICBjb25zdCB1cmwgPSBvcHRpb25zLmdhc2xlc3MucmVsYXllclVybC5zcGxpdChcIi9yZWxheWVyL1wiKVswXTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChgJHt1cmx9L3RyYW5zYWN0aW9uL3N0YXR1cy8ke3F1ZXVlSWR9YCwge1xuICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgfSk7XG4gICAgY29uc3QgcmVzSnNvbiA9IGF3YWl0IHJlcy5qc29uKCk7XG4gICAgaWYgKCFyZXMub2spIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IHJlc0pzb24ucmVzdWx0O1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBzd2l0Y2ggKHJlc3VsdC5zdGF0dXMpIHtcbiAgICAgICAgY2FzZSBcImVycm9yZWRcIjpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVHJhbnNhY3Rpb24gZXJyb3JlZCB3aXRoIHJlYXNvbjogJHtyZXN1bHQuZXJyb3JNZXNzYWdlfWApO1xuICAgICAgICBjYXNlIFwiY2FuY2VsbGVkXCI6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUcmFuc2FjdGlvbiBleGVjdXRpb24gY2FuY2VsbGVkLlwiKTtcbiAgICAgICAgY2FzZSBcIm1pbmVkXCI6IHtcbiAgICAgICAgICAgIGNvbnN0IHJlY2VpcHQgPSBhd2FpdCB3YWl0Rm9yUmVjZWlwdCh7XG4gICAgICAgICAgICAgICAgY2xpZW50OiBvcHRpb25zLnRyYW5zYWN0aW9uLmNsaWVudCxcbiAgICAgICAgICAgICAgICBjaGFpbjogb3B0aW9ucy50cmFuc2FjdGlvbi5jaGFpbixcbiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbkhhc2g6IHJlc3VsdC50cmFuc2FjdGlvbkhhc2gsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiByZWNlaXB0O1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW5naW5lLmpzLm1hcCJdLCJuYW1lcyI6WyJnZXRDb250cmFjdCIsInN0cmluZ2lmeSIsInJlYWRDb250cmFjdCIsIndhaXRGb3JSZWNlaXB0IiwicHJlcGFyZUVuZ2luZVRyYW5zYWN0aW9uIiwiYWNjb3VudCIsInNlcmlhbGl6YWJsZVRyYW5zYWN0aW9uIiwidHJhbnNhY3Rpb24iLCJnYXNsZXNzIiwiZm9ycndhZGVyQ29udHJhY3QiLCJhZGRyZXNzIiwicmVsYXllckZvcndhcmRlckFkZHJlc3MiLCJjaGFpbiIsImNsaWVudCIsIm5vbmNlIiwiY29udHJhY3QiLCJtZXRob2QiLCJwYXJhbXMiLCJzaWduYXR1cmUiLCJtZXNzYWdlIiwidG8iLCJFcnJvciIsImdhcyIsImRhdGEiLCJleHBlcmltZW50YWxDaGFpbmxlc3NTdXBwb3J0IiwiZnJvbSIsInZhbHVlIiwiY2hhaW5pZCIsIkJpZ0ludCIsImlkIiwic2lnblR5cGVkRGF0YSIsImRvbWFpbiIsIm5hbWUiLCJ2ZXJzaW9uIiwidmVyaWZ5aW5nQ29udHJhY3QiLCJwcmltYXJ5VHlwZSIsInR5cGVzIiwiRm9yd2FyZFJlcXVlc3QiLCJDaGFpbkF3YXJlRm9yd2FyZFJlcXVlc3QiLCJkb21haW5OYW1lIiwiZG9tYWluVmVyc2lvbiIsImNoYWluSWQiLCJtZXNzYWdlVHlwZSIsInR5cGUiLCJyZWxheUVuZ2luZVRyYW5zYWN0aW9uIiwib3B0aW9ucyIsInJlc3BvbnNlIiwiZmV0Y2giLCJyZWxheWVyVXJsIiwiaGVhZGVycyIsImJvZHkiLCJyZXF1ZXN0IiwiZm9yd2FyZGVyQWRkcmVzcyIsIm9rIiwidGV4dCIsImpzb24iLCJyZXN1bHQiLCJxdWV1ZUlkIiwidGltZW91dCIsImludGVydmFsIiwiZW5kdGltZSIsIkRhdGUiLCJub3ciLCJyZWNlaXB0IiwiZmV0Y2hSZWNlaXB0IiwidHJhbnNhY3Rpb25IYXNoIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiYXJncyIsInVybCIsInNwbGl0IiwicmVzIiwicmVzSnNvbiIsInN0YXR1cyIsImVycm9yTWVzc2FnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/transaction/actions/gasless/providers/engine.js\n"));

/***/ })

}]);