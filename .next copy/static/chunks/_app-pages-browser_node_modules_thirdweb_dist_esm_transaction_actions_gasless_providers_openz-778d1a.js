"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_thirdweb_dist_esm_transaction_actions_gasless_providers_openz-778d1a"],{

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/transaction/actions/gasless/providers/openzeppelin.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/transaction/actions/gasless/providers/openzeppelin.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prepareOpenZeppelinTransaction: function() { return /* binding */ prepareOpenZeppelinTransaction; },\n/* harmony export */   relayOpenZeppelinTransaction: function() { return /* binding */ relayOpenZeppelinTransaction; }\n/* harmony export */ });\n/* harmony import */ var _contract_contract_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../contract/contract.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/contract/contract.js\");\n/* harmony import */ var _utils_encoding_helpers_is_hex_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../utils/encoding/helpers/is-hex.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/encoding/helpers/is-hex.js\");\n/* harmony import */ var _utils_json_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../utils/json.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/json.js\");\n/* harmony import */ var _read_contract_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../read-contract.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/transaction/read-contract.js\");\n\n\n\n\n/**\n * @internal - only exported for testing\n */ async function prepareOpenZeppelinTransaction(param) {\n    let { account, serializableTransaction, transaction, gasless } = param;\n    const forrwaderContract = (0,_contract_contract_js__WEBPACK_IMPORTED_MODULE_0__.getContract)({\n        address: gasless.relayerForwarderAddress,\n        chain: transaction.chain,\n        client: transaction.client\n    });\n    const nonce = await (0,_read_contract_js__WEBPACK_IMPORTED_MODULE_1__.readContract)({\n        contract: forrwaderContract,\n        method: \"function getNonce(address) view returns (uint256)\",\n        params: [\n            account.address\n        ]\n    });\n    const [signature, message] = await (async ()=>{\n        // TODO: handle special case for `approve` -> `permit` transactions\n        if (!serializableTransaction.to) {\n            throw new Error(\"OpenZeppelin transactions must have a 'to' address\");\n        }\n        if (!serializableTransaction.gas) {\n            throw new Error(\"OpenZeppelin transactions must have a 'gas' value\");\n        }\n        if (!serializableTransaction.data) {\n            throw new Error(\"OpenZeppelin transactions must have a 'data' value\");\n        }\n        // chainless support!\n        if (gasless.experimentalChainlessSupport) {\n            const message = {\n                from: account.address,\n                to: serializableTransaction.to,\n                value: 0n,\n                gas: serializableTransaction.gas,\n                nonce: nonce,\n                data: serializableTransaction.data,\n                chainid: BigInt(transaction.chain.id)\n            };\n            return [\n                await account.signTypedData({\n                    domain: {\n                        name: \"GSNv2 Forwarder\",\n                        version: \"0.0.1\",\n                        verifyingContract: forrwaderContract.address\n                    },\n                    message,\n                    primaryType: \"ForwardRequest\",\n                    types: {\n                        ForwardRequest: ChainAwareForwardRequest\n                    }\n                }),\n                message\n            ];\n        }\n        // else non-chainless support\n        const message = {\n            from: account.address,\n            to: serializableTransaction.to,\n            value: 0n,\n            gas: serializableTransaction.gas,\n            nonce: nonce,\n            data: serializableTransaction.data\n        };\n        var _gasless_domainName, _gasless_domainVersion;\n        return [\n            await account.signTypedData({\n                domain: {\n                    name: (_gasless_domainName = gasless.domainName) !== null && _gasless_domainName !== void 0 ? _gasless_domainName : \"GSNv2 Forwarder\",\n                    version: (_gasless_domainVersion = gasless.domainVersion) !== null && _gasless_domainVersion !== void 0 ? _gasless_domainVersion : \"0.0.1\",\n                    chainId: transaction.chain.id,\n                    verifyingContract: forrwaderContract.address\n                },\n                message,\n                primaryType: \"ForwardRequest\",\n                types: {\n                    ForwardRequest\n                }\n            }),\n            message\n        ];\n    })();\n    // TODO: handle special case for `approve` -> `permit`\n    const messageType = \"forward\";\n    return {\n        message,\n        signature,\n        messageType\n    };\n}\nconst ForwardRequest = [\n    {\n        name: \"from\",\n        type: \"address\"\n    },\n    {\n        name: \"to\",\n        type: \"address\"\n    },\n    {\n        name: \"value\",\n        type: \"uint256\"\n    },\n    {\n        name: \"gas\",\n        type: \"uint256\"\n    },\n    {\n        name: \"nonce\",\n        type: \"uint256\"\n    },\n    {\n        name: \"data\",\n        type: \"bytes\"\n    }\n];\nconst ChainAwareForwardRequest = [\n    {\n        name: \"from\",\n        type: \"address\"\n    },\n    {\n        name: \"to\",\n        type: \"address\"\n    },\n    {\n        name: \"value\",\n        type: \"uint256\"\n    },\n    {\n        name: \"gas\",\n        type: \"uint256\"\n    },\n    {\n        name: \"nonce\",\n        type: \"uint256\"\n    },\n    {\n        name: \"data\",\n        type: \"bytes\"\n    },\n    {\n        name: \"chainid\",\n        type: \"uint256\"\n    }\n];\n/**\n * @internal\n */ async function relayOpenZeppelinTransaction(options) {\n    const { message, messageType, signature } = await prepareOpenZeppelinTransaction(options);\n    const response = await fetch(options.gasless.relayerUrl, {\n        method: \"POST\",\n        body: (0,_utils_json_js__WEBPACK_IMPORTED_MODULE_2__.stringify)({\n            request: message,\n            type: messageType,\n            signature,\n            forwarderAddress: options.gasless.relayerForwarderAddress\n        })\n    });\n    if (!response.ok) {\n        var _response_body;\n        (_response_body = response.body) === null || _response_body === void 0 ? void 0 : _response_body.cancel();\n        throw new Error(\"Failed to send transaction: \".concat(await response.text()));\n    }\n    const json = await response.json();\n    if (!json.result) {\n        throw new Error(\"Relay transaction failed: \".concat(json.message));\n    }\n    const transactionHash = JSON.parse(json.result).txHash;\n    if ((0,_utils_encoding_helpers_is_hex_js__WEBPACK_IMPORTED_MODULE_3__.isHex)(transactionHash)) {\n        return {\n            transactionHash,\n            chain: options.transaction.chain,\n            client: options.transaction.client\n        };\n    }\n    throw new Error(\"Failed to send transaction: \".concat((0,_utils_json_js__WEBPACK_IMPORTED_MODULE_2__.stringify)(json)));\n} //# sourceMappingURL=openzeppelin.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/transaction/actions/gasless/providers/openzeppelin.js\n"));

/***/ })

}]);