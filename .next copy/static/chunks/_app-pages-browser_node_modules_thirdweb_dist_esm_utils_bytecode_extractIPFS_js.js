"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_thirdweb_dist_esm_utils_bytecode_extractIPFS_js"],{

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/base58/alphabet.js":
/*!*****************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/utils/base58/alphabet.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ALPHABET: function() { return /* binding */ ALPHABET; }\n/* harmony export */ });\nconst ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"; //# sourceMappingURL=alphabet.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS91dGlscy9iYXNlNTgvYWxwaGFiZXQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLFdBQVcsNkRBQTZELENBQ3JGLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvdGhpcmR3ZWIvZGlzdC9lc20vdXRpbHMvYmFzZTU4L2FscGhhYmV0LmpzP2Q4MzkiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IEFMUEhBQkVUID0gXCIxMjM0NTY3ODlBQkNERUZHSEpLTE1OUFFSU1RVVldYWVphYmNkZWZnaGlqa21ub3BxcnN0dXZ3eHl6XCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbHBoYWJldC5qcy5tYXAiXSwibmFtZXMiOlsiQUxQSEFCRVQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/base58/alphabet.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/base58/encode.js":
/*!***************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/utils/base58/encode.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base58Encode: function() { return /* binding */ base58Encode; }\n/* harmony export */ });\n/* harmony import */ var _alphabet_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./alphabet.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/base58/alphabet.js\");\n\nconst BASE = _alphabet_js__WEBPACK_IMPORTED_MODULE_0__.ALPHABET.length;\nconst LEADER = /* @__PURE__ */ (()=>_alphabet_js__WEBPACK_IMPORTED_MODULE_0__.ALPHABET.charAt(0))();\nconst iFACTOR = /* @__PURE__ */ (()=>Math.log(256) / Math.log(BASE))(); // log(256) / log(BASE), rounded up\n/**\n * Encodes a Uint8Array into a base58 string.\n * @param source - The Uint8Array to encode.\n * @returns The base58 encoded string.\n * @throws {TypeError} If the source is not a Uint8Array.\n * @throws {Error} If there is a non-zero carry during the encoding process.\n * @example\n * ```ts\n * import { base58Encode } from \"thirdweb/utils;\n * const source = new Uint8Array([0, 1, 2, 3, 4, 5]);\n * const encoded = base58Encode(source);\n * console.log(encoded);\n * ```\n */ function base58Encode(source) {\n    if (!(source instanceof Uint8Array)) {\n        throw new TypeError(\"Expected Uint8Array\");\n    }\n    if (source.length === 0) {\n        return \"\";\n    }\n    // Skip & count leading zeroes.\n    let zeroes = 0;\n    let length = 0;\n    let pbegin = 0;\n    const pend = source.length;\n    while(pbegin !== pend && source[pbegin] === 0){\n        pbegin++;\n        zeroes++;\n    }\n    // Allocate enough space in big-endian base58 representation.\n    const size = (pend - pbegin) * iFACTOR + 1 >>> 0;\n    const b58 = new Uint8Array(size);\n    // Process the bytes.\n    while(pbegin !== pend){\n        let carry = source[pbegin] || 0;\n        // Apply \"b58 = b58 * 256 + ch\".\n        let i = 0;\n        for(let it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++){\n            carry += 256 * (b58[it1] || 0) >>> 0;\n            b58[it1] = carry % BASE >>> 0;\n            carry = carry / BASE >>> 0;\n        }\n        if (carry !== 0) {\n            throw new Error(\"Non-zero carry\");\n        }\n        length = i;\n        pbegin++;\n    }\n    // Skip leading zeroes in base58 result.\n    let it2 = size - length;\n    while(it2 !== size && b58[it2] === 0){\n        it2++;\n    }\n    // Translate the result into a string.\n    let str = LEADER.repeat(zeroes);\n    for(; it2 < size; ++it2){\n        str += _alphabet_js__WEBPACK_IMPORTED_MODULE_0__.ALPHABET.charAt(b58[it2] || 0);\n    }\n    return str;\n} //# sourceMappingURL=encode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS91dGlscy9iYXNlNTgvZW5jb2RlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlDO0FBQ3pDLE1BQU1DLE9BQU9ELGtEQUFRQSxDQUFDRSxNQUFNO0FBQzVCLE1BQU1DLFNBQXlCLGFBQUgsR0FBSSxLQUFNSCxrREFBUUEsQ0FBQ0ksTUFBTSxDQUFDLEVBQUM7QUFDdkQsTUFBTUMsVUFBMEIsYUFBSCxHQUFJLEtBQU1DLEtBQUtDLEdBQUcsQ0FBQyxPQUFPRCxLQUFLQyxHQUFHLENBQUNOLEtBQUksS0FBTSxtQ0FBbUM7QUFDN0c7Ozs7Ozs7Ozs7Ozs7Q0FhQyxHQUNNLFNBQVNPLGFBQWFDLE1BQU07SUFDL0IsSUFBSSxDQUFFQSxDQUFBQSxrQkFBa0JDLFVBQVMsR0FBSTtRQUNqQyxNQUFNLElBQUlDLFVBQVU7SUFDeEI7SUFDQSxJQUFJRixPQUFPUCxNQUFNLEtBQUssR0FBRztRQUNyQixPQUFPO0lBQ1g7SUFDQSwrQkFBK0I7SUFDL0IsSUFBSVUsU0FBUztJQUNiLElBQUlWLFNBQVM7SUFDYixJQUFJVyxTQUFTO0lBQ2IsTUFBTUMsT0FBT0wsT0FBT1AsTUFBTTtJQUMxQixNQUFPVyxXQUFXQyxRQUFRTCxNQUFNLENBQUNJLE9BQU8sS0FBSyxFQUFHO1FBQzVDQTtRQUNBRDtJQUNKO0lBQ0EsNkRBQTZEO0lBQzdELE1BQU1HLE9BQU8sQ0FBRUQsT0FBT0QsTUFBSyxJQUFLUixVQUFVLE1BQU87SUFDakQsTUFBTVcsTUFBTSxJQUFJTixXQUFXSztJQUMzQixxQkFBcUI7SUFDckIsTUFBT0YsV0FBV0MsS0FBTTtRQUNwQixJQUFJRyxRQUFRUixNQUFNLENBQUNJLE9BQU8sSUFBSTtRQUM5QixnQ0FBZ0M7UUFDaEMsSUFBSUssSUFBSTtRQUNSLElBQUssSUFBSUMsTUFBTUosT0FBTyxHQUFHLENBQUNFLFVBQVUsS0FBS0MsSUFBSWhCLE1BQUssS0FBTWlCLFFBQVEsQ0FBQyxHQUFHQSxPQUFPRCxJQUFLO1lBQzVFRCxTQUFTLE1BQVFELENBQUFBLEdBQUcsQ0FBQ0csSUFBSSxJQUFJLE9BQVE7WUFDckNILEdBQUcsQ0FBQ0csSUFBSSxHQUFHLFFBQVNsQixTQUFVO1lBQzlCZ0IsUUFBUSxRQUFTaEIsU0FBVTtRQUMvQjtRQUNBLElBQUlnQixVQUFVLEdBQUc7WUFDYixNQUFNLElBQUlHLE1BQU07UUFDcEI7UUFDQWxCLFNBQVNnQjtRQUNUTDtJQUNKO0lBQ0Esd0NBQXdDO0lBQ3hDLElBQUlRLE1BQU1OLE9BQU9iO0lBQ2pCLE1BQU9tQixRQUFRTixRQUFRQyxHQUFHLENBQUNLLElBQUksS0FBSyxFQUFHO1FBQ25DQTtJQUNKO0lBQ0Esc0NBQXNDO0lBQ3RDLElBQUlDLE1BQU1uQixPQUFPb0IsTUFBTSxDQUFDWDtJQUN4QixNQUFPUyxNQUFNTixNQUFNLEVBQUVNLElBQUs7UUFDdEJDLE9BQU90QixrREFBUUEsQ0FBQ0ksTUFBTSxDQUFDWSxHQUFHLENBQUNLLElBQUksSUFBSTtJQUN2QztJQUNBLE9BQU9DO0FBQ1gsRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RoaXJkd2ViL2Rpc3QvZXNtL3V0aWxzL2Jhc2U1OC9lbmNvZGUuanM/YWJhYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBTFBIQUJFVCB9IGZyb20gXCIuL2FscGhhYmV0LmpzXCI7XG5jb25zdCBCQVNFID0gQUxQSEFCRVQubGVuZ3RoO1xuY29uc3QgTEVBREVSID0gLyogQF9fUFVSRV9fICovICgoKSA9PiBBTFBIQUJFVC5jaGFyQXQoMCkpKCk7XG5jb25zdCBpRkFDVE9SID0gLyogQF9fUFVSRV9fICovICgoKSA9PiBNYXRoLmxvZygyNTYpIC8gTWF0aC5sb2coQkFTRSkpKCk7IC8vIGxvZygyNTYpIC8gbG9nKEJBU0UpLCByb3VuZGVkIHVwXG4vKipcbiAqIEVuY29kZXMgYSBVaW50OEFycmF5IGludG8gYSBiYXNlNTggc3RyaW5nLlxuICogQHBhcmFtIHNvdXJjZSAtIFRoZSBVaW50OEFycmF5IHRvIGVuY29kZS5cbiAqIEByZXR1cm5zIFRoZSBiYXNlNTggZW5jb2RlZCBzdHJpbmcuXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIHRoZSBzb3VyY2UgaXMgbm90IGEgVWludDhBcnJheS5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGVyZSBpcyBhIG5vbi16ZXJvIGNhcnJ5IGR1cmluZyB0aGUgZW5jb2RpbmcgcHJvY2Vzcy5cbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgYmFzZTU4RW5jb2RlIH0gZnJvbSBcInRoaXJkd2ViL3V0aWxzO1xuICogY29uc3Qgc291cmNlID0gbmV3IFVpbnQ4QXJyYXkoWzAsIDEsIDIsIDMsIDQsIDVdKTtcbiAqIGNvbnN0IGVuY29kZWQgPSBiYXNlNThFbmNvZGUoc291cmNlKTtcbiAqIGNvbnNvbGUubG9nKGVuY29kZWQpO1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBiYXNlNThFbmNvZGUoc291cmNlKSB7XG4gICAgaWYgKCEoc291cmNlIGluc3RhbmNlb2YgVWludDhBcnJheSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4cGVjdGVkIFVpbnQ4QXJyYXlcIik7XG4gICAgfVxuICAgIGlmIChzb3VyY2UubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICAvLyBTa2lwICYgY291bnQgbGVhZGluZyB6ZXJvZXMuXG4gICAgbGV0IHplcm9lcyA9IDA7XG4gICAgbGV0IGxlbmd0aCA9IDA7XG4gICAgbGV0IHBiZWdpbiA9IDA7XG4gICAgY29uc3QgcGVuZCA9IHNvdXJjZS5sZW5ndGg7XG4gICAgd2hpbGUgKHBiZWdpbiAhPT0gcGVuZCAmJiBzb3VyY2VbcGJlZ2luXSA9PT0gMCkge1xuICAgICAgICBwYmVnaW4rKztcbiAgICAgICAgemVyb2VzKys7XG4gICAgfVxuICAgIC8vIEFsbG9jYXRlIGVub3VnaCBzcGFjZSBpbiBiaWctZW5kaWFuIGJhc2U1OCByZXByZXNlbnRhdGlvbi5cbiAgICBjb25zdCBzaXplID0gKChwZW5kIC0gcGJlZ2luKSAqIGlGQUNUT1IgKyAxKSA+Pj4gMDtcbiAgICBjb25zdCBiNTggPSBuZXcgVWludDhBcnJheShzaXplKTtcbiAgICAvLyBQcm9jZXNzIHRoZSBieXRlcy5cbiAgICB3aGlsZSAocGJlZ2luICE9PSBwZW5kKSB7XG4gICAgICAgIGxldCBjYXJyeSA9IHNvdXJjZVtwYmVnaW5dIHx8IDA7XG4gICAgICAgIC8vIEFwcGx5IFwiYjU4ID0gYjU4ICogMjU2ICsgY2hcIi5cbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICBmb3IgKGxldCBpdDEgPSBzaXplIC0gMTsgKGNhcnJ5ICE9PSAwIHx8IGkgPCBsZW5ndGgpICYmIGl0MSAhPT0gLTE7IGl0MS0tLCBpKyspIHtcbiAgICAgICAgICAgIGNhcnJ5ICs9ICgyNTYgKiAoYjU4W2l0MV0gfHwgMCkpID4+PiAwO1xuICAgICAgICAgICAgYjU4W2l0MV0gPSAoY2FycnkgJSBCQVNFKSA+Pj4gMDtcbiAgICAgICAgICAgIGNhcnJ5ID0gKGNhcnJ5IC8gQkFTRSkgPj4+IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb24temVybyBjYXJyeVwiKTtcbiAgICAgICAgfVxuICAgICAgICBsZW5ndGggPSBpO1xuICAgICAgICBwYmVnaW4rKztcbiAgICB9XG4gICAgLy8gU2tpcCBsZWFkaW5nIHplcm9lcyBpbiBiYXNlNTggcmVzdWx0LlxuICAgIGxldCBpdDIgPSBzaXplIC0gbGVuZ3RoO1xuICAgIHdoaWxlIChpdDIgIT09IHNpemUgJiYgYjU4W2l0Ml0gPT09IDApIHtcbiAgICAgICAgaXQyKys7XG4gICAgfVxuICAgIC8vIFRyYW5zbGF0ZSB0aGUgcmVzdWx0IGludG8gYSBzdHJpbmcuXG4gICAgbGV0IHN0ciA9IExFQURFUi5yZXBlYXQoemVyb2VzKTtcbiAgICBmb3IgKDsgaXQyIDwgc2l6ZTsgKytpdDIpIHtcbiAgICAgICAgc3RyICs9IEFMUEhBQkVULmNoYXJBdChiNThbaXQyXSB8fCAwKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVuY29kZS5qcy5tYXAiXSwibmFtZXMiOlsiQUxQSEFCRVQiLCJCQVNFIiwibGVuZ3RoIiwiTEVBREVSIiwiY2hhckF0IiwiaUZBQ1RPUiIsIk1hdGgiLCJsb2ciLCJiYXNlNThFbmNvZGUiLCJzb3VyY2UiLCJVaW50OEFycmF5IiwiVHlwZUVycm9yIiwiemVyb2VzIiwicGJlZ2luIiwicGVuZCIsInNpemUiLCJiNTgiLCJjYXJyeSIsImkiLCJpdDEiLCJFcnJvciIsIml0MiIsInN0ciIsInJlcGVhdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/base58/encode.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/bytecode/cbor-decode.js":
/*!**********************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/utils/bytecode/cbor-decode.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: function() { return /* binding */ decode; }\n/* harmony export */ });\n// original source: https://github.com/kriszyp/cbor-x/blob/master/decode.js\n// heavily modified to remove all non-essential code\n// TODO: re-enable typescript and properly type this\n// @ts-nocheck - TODO: re-enable typescript and properly type this\nlet src;\nlet srcEnd;\nlet position = 0;\nconst EMPTY_ARRAY = [];\nlet strings = EMPTY_ARRAY;\nlet stringPosition = 0;\nlet currentDecoder = {};\nlet currentStructures;\nlet srcString;\nconst srcStringStart = 0;\nlet srcStringEnd = 0;\nlet bundledStrings;\nlet referenceMap;\nconst currentExtensions = [];\nlet packedValues;\nlet dataView;\nconst defaultOptions = {\n    useRecords: false,\n    mapsAsObjects: true\n};\nfunction readFixedString(length) {\n    let result;\n    if (length < 16) {\n        if (result = shortStringInJS(length)) return result;\n    }\n    if (length > 64 && decoder) return decoder.decode(src.subarray(position, position += length));\n    const end = position + length;\n    const units = [];\n    result = \"\";\n    while(position < end){\n        const byte1 = src[position++];\n        if ((byte1 & 0x80) === 0) {\n            // 1 byte\n            units.push(byte1);\n        } else if ((byte1 & 0xe0) === 0xc0) {\n            // 2 bytes\n            const byte2 = src[position++] & 0x3f;\n            units.push((byte1 & 0x1f) << 6 | byte2);\n        } else if ((byte1 & 0xf0) === 0xe0) {\n            // 3 bytes\n            const byte2 = src[position++] & 0x3f;\n            const byte3 = src[position++] & 0x3f;\n            units.push((byte1 & 0x1f) << 12 | byte2 << 6 | byte3);\n        } else if ((byte1 & 0xf8) === 0xf0) {\n            // 4 bytes\n            const byte2 = src[position++] & 0x3f;\n            const byte3 = src[position++] & 0x3f;\n            const byte4 = src[position++] & 0x3f;\n            let unit = (byte1 & 0x07) << 0x12 | byte2 << 0x0c | byte3 << 0x06 | byte4;\n            if (unit > 0xffff) {\n                unit -= 0x10000;\n                units.push(unit >>> 10 & 0x3ff | 0xd800);\n                unit = 0xdc00 | unit & 0x3ff;\n            }\n            units.push(unit);\n        } else {\n            units.push(byte1);\n        }\n        if (units.length >= 0x1000) {\n            result += fromCharCode.apply(String, units);\n            units.length = 0;\n        }\n    }\n    if (units.length > 0) {\n        result += fromCharCode.apply(String, units);\n    }\n    return result;\n}\nclass Decoder {\n    decodeKey(key) {\n        return key;\n    }\n    decode(source) {\n        let end = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : -1;\n        srcEnd = end > -1 ? end : source.length;\n        position = 0;\n        stringPosition = 0;\n        srcStringEnd = 0;\n        srcString = null;\n        strings = EMPTY_ARRAY;\n        bundledStrings = null;\n        src = source;\n        // this provides cached access to the data view for a buffer if it is getting reused, which is a recommend\n        // technique for getting data from a database where it can be copied into an existing buffer instead of creating\n        // new ones\n        try {\n            dataView = source.dataView || (source.dataView = new DataView(source.buffer, source.byteOffset, source.byteLength));\n        } catch (error) {\n            // if it doesn't have a buffer, maybe it is the wrong type of object\n            src = null;\n            if (source instanceof Uint8Array) {\n                throw error;\n            }\n            throw new Error(\"Source must be a Uint8Array or Buffer but was a \".concat(source && typeof source === \"object\" ? source.constructor.name : typeof source));\n        }\n        if (this instanceof Decoder) {\n            currentDecoder = this;\n            packedValues = this.sharedValues && (this.pack ? new Array(this.maxPrivatePackedValues || 16).concat(this.sharedValues) : this.sharedValues);\n            if (!currentStructures || currentStructures.length > 0) {\n                currentStructures = [];\n            }\n        } else {\n            currentDecoder = defaultOptions;\n            if (!currentStructures || currentStructures.length > 0) {\n                currentStructures = [];\n            }\n            packedValues = null;\n        }\n        return checkedRead();\n    }\n    constructor(){\n        Object.assign(this, defaultOptions);\n    }\n}\nfunction checkedRead() {\n    try {\n        const result = read();\n        if (bundledStrings) {\n            if (position >= bundledStrings.postBundlePosition) {\n                const error = new Error(\"Unexpected bundle position\");\n                error.incomplete = true;\n                throw error;\n            }\n            // bundled strings to skip past\n            position = bundledStrings.postBundlePosition;\n            bundledStrings = null;\n        }\n        if (position === srcEnd) {\n            // finished reading this source, cleanup references\n            currentStructures = null;\n            src = null;\n            if (referenceMap) {\n                referenceMap = null;\n            }\n        } else if (position > srcEnd) {\n            // over read\n            const error = new Error(\"Unexpected end of CBOR data\");\n            error.incomplete = true;\n            throw error;\n        } else {\n            throw new Error(\"Data read, but end of buffer not reached\");\n        }\n        // else more to read, but we are reading sequentially, so don't clear source yet\n        return result;\n    } catch (error) {\n        clearSource();\n        if (error instanceof RangeError || error.message.startsWith(\"Unexpected end of buffer\")) {\n            error.incomplete = true;\n        }\n        throw error;\n    }\n}\nfunction read() {\n    let token = src[position++];\n    const majorType = token >> 5;\n    token = token & 0x1f;\n    if (token > 0x17) {\n        switch(token){\n            case 0x18:\n                token = src[position++];\n                break;\n            default:\n                throw new Error(\"Unknown token \".concat(token));\n        }\n    }\n    switch(majorType){\n        case 0:\n            return token;\n        case 1:\n            return ~token;\n        case 2:\n            return readBin(token);\n        case 3:\n            if (srcStringEnd >= position) {\n                return srcString.slice(position - srcStringStart, (position += token) - srcStringStart);\n            }\n            if (srcStringEnd === 0 && srcEnd < 140 && token < 32) {\n                // for small blocks, avoiding the overhead of the extract call is helpful\n                const string = token < 16 ? shortStringInJS(token) : longStringInJS(token);\n                if (string !== null) {\n                    return string;\n                }\n            }\n            return readFixedString(token);\n        case 4:\n            {\n                const array = new Array(token);\n                for(let i = 0; i < token; i++){\n                    array[i] = read();\n                }\n                return array;\n            }\n        case 5:\n            {\n                const object = {};\n                for(let i = 0; i < token; i++){\n                    object[safeKey(read())] = read();\n                }\n                return object;\n            }\n        default:\n            if (Number.isNaN(token)) {\n                const error = new Error(\"Unexpected end of CBOR data\");\n                error.incomplete = true;\n                throw error;\n            }\n            throw new Error(\"Unknown CBOR token \".concat(token));\n    }\n}\nfunction safeKey(key) {\n    // protect against prototype pollution\n    if (typeof key === \"string\") {\n        return key === \"__proto__\" ? \"__proto_\" : key;\n    }\n    if (typeof key !== \"object\") {\n        return key.toString();\n    }\n    // protect against expensive (DoS) string conversions\n    throw new Error(\"Invalid property name type \".concat(typeof key));\n}\nconst fromCharCode = String.fromCharCode;\nfunction longStringInJS(length) {\n    const start = position;\n    const bytes = new Array(length);\n    for(let i = 0; i < length; i++){\n        const byte = src[position++];\n        if ((byte & 0x80) > 0) {\n            position = start;\n            return;\n        }\n        bytes[i] = byte;\n    }\n    return fromCharCode.apply(String, bytes);\n}\nfunction shortStringInJS(length) {\n    if (length < 4) {\n        if (length < 2) {\n            if (length === 0) {\n                return \"\";\n            }\n            const a = src[position++];\n            if ((a & 0x80) > 1) {\n                position -= 1;\n                return;\n            }\n            return fromCharCode(a);\n        }\n        const a = src[position++];\n        const b = src[position++];\n        if ((a & 0x80) > 0 || (b & 0x80) > 0) {\n            position -= 2;\n            return;\n        }\n        if (length < 3) {\n            return fromCharCode(a, b);\n        }\n        const c = src[position++];\n        if ((c & 0x80) > 0) {\n            position -= 3;\n            return;\n        }\n        return fromCharCode(a, b, c);\n    }\n    const a = src[position++];\n    const b = src[position++];\n    const c = src[position++];\n    const d = src[position++];\n    if ((a & 0x80) > 0 || (b & 0x80) > 0 || (c & 0x80) > 0 || (d & 0x80) > 0) {\n        position -= 4;\n        return;\n    }\n    if (length < 6) {\n        if (length === 4) {\n            return fromCharCode(a, b, c, d);\n        }\n        const e = src[position++];\n        if ((e & 0x80) > 0) {\n            position -= 5;\n            return;\n        }\n        return fromCharCode(a, b, c, d, e);\n    }\n    if (length < 8) {\n        const e = src[position++];\n        const f = src[position++];\n        if ((e & 0x80) > 0 || (f & 0x80) > 0) {\n            position -= 6;\n            return;\n        }\n        if (length < 7) {\n            return fromCharCode(a, b, c, d, e, f);\n        }\n        const g = src[position++];\n        if ((g & 0x80) > 0) {\n            position -= 7;\n            return;\n        }\n        return fromCharCode(a, b, c, d, e, f, g);\n    }\n    const e = src[position++];\n    const f = src[position++];\n    const g = src[position++];\n    const h = src[position++];\n    if ((e & 0x80) > 0 || (f & 0x80) > 0 || (g & 0x80) > 0 || (h & 0x80) > 0) {\n        position -= 8;\n        return;\n    }\n    if (length < 10) {\n        if (length === 8) {\n            return fromCharCode(a, b, c, d, e, f, g, h);\n        }\n        const i = src[position++];\n        if ((i & 0x80) > 0) {\n            position -= 9;\n            return;\n        }\n        return fromCharCode(a, b, c, d, e, f, g, h, i);\n    }\n    if (length < 12) {\n        const i = src[position++];\n        const j = src[position++];\n        if ((i & 0x80) > 0 || (j & 0x80) > 0) {\n            position -= 10;\n            return;\n        }\n        if (length < 11) {\n            return fromCharCode(a, b, c, d, e, f, g, h, i, j);\n        }\n        const k = src[position++];\n        if ((k & 0x80) > 0) {\n            position -= 11;\n            return;\n        }\n        return fromCharCode(a, b, c, d, e, f, g, h, i, j, k);\n    }\n    const i = src[position++];\n    const j = src[position++];\n    const k = src[position++];\n    const l = src[position++];\n    if ((i & 0x80) > 0 || (j & 0x80) > 0 || (k & 0x80) > 0 || (l & 0x80) > 0) {\n        position -= 12;\n        return;\n    }\n    if (length < 14) {\n        if (length === 12) {\n            return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l);\n        }\n        const m = src[position++];\n        if ((m & 0x80) > 0) {\n            position -= 13;\n            return;\n        }\n        return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m);\n    }\n    const m = src[position++];\n    const n = src[position++];\n    if ((m & 0x80) > 0 || (n & 0x80) > 0) {\n        position -= 14;\n        return;\n    }\n    if (length < 15) {\n        return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m, n);\n    }\n    const o = src[position++];\n    if ((o & 0x80) > 0) {\n        position -= 15;\n        return;\n    }\n    return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);\n}\nfunction readBin(length) {\n    return currentDecoder.copyBuffers ? Uint8Array.prototype.slice.call(src, position, position += length) : src.subarray(position, position += length);\n}\nconst glbl = {\n    Error,\n    RegExp\n};\ncurrentExtensions[27] = (data)=>{\n    // http://cbor.schmorp.de/generic-object\n    return (glbl[data[0]] || Error)(data[1], data[2]);\n};\nconst packedTable = (read_)=>{\n    if (src[position++] !== 0x84) {\n        const error = new Error(\"Packed values structure must be followed by a 4 element array\");\n        if (src.length < position) {\n            error.incomplete = true;\n        }\n        throw error;\n    }\n    const newPackedValues = read_(); // packed values\n    if (!newPackedValues || !newPackedValues.length) {\n        const error = new Error(\"Packed values structure must be followed by a 4 element array\");\n        error.incomplete = true;\n        throw error;\n    }\n    packedValues = packedValues ? newPackedValues.concat(packedValues.slice(newPackedValues.length)) : newPackedValues;\n    packedValues.prefixes = read_();\n    packedValues.suffixes = read_();\n    return read_(); // read the rump\n};\npackedTable.handlesRead = true;\ncurrentExtensions[28] = (read_)=>{\n    // shareable http://cbor.schmorp.de/value-sharing (for structured clones)\n    if (!referenceMap) {\n        referenceMap = new Map();\n        referenceMap.id = 0;\n    }\n    const id = referenceMap.id++;\n    const token = src[position];\n    let target;\n    // TODO: handle Maps, Sets, and other types that can cycle; this is complicated, because you potentially need to read\n    // ahead past references to record structure definitions\n    if (token >> 5 === 4) {\n        target = [];\n    } else {\n        target = {};\n    }\n    const refEntry = {\n        target\n    }; // a placeholder object\n    referenceMap.set(id, refEntry);\n    const targetProperties = read_(); // read the next value as the target object to id\n    if (refEntry.used) {\n        // there is a cycle, so we have to assign properties to original target\n        return Object.assign(target, targetProperties);\n    }\n    refEntry.target = targetProperties; // the placeholder wasn't used, replace with the deserialized one\n    return targetProperties; // no cycle, can just use the returned read object\n};\nfunction clearSource() {\n    src = null;\n    referenceMap = null;\n    currentStructures = null;\n}\nconst mult10 = new Array(147); // this is a table matching binary exponents to the multiplier to determine significant digit rounding\nfor(let i = 0; i < 256; i++){\n    mult10[i] = /* @__PURE__ */ (()=>Number(\"1e\".concat(Math.floor(45.15 - i * 0.30103))))();\n}\nconst defaultDecoder = new Decoder();\nconst decode = defaultDecoder.decode; //# sourceMappingURL=cbor-decode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/bytecode/cbor-decode.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/bytecode/extractIPFS.js":
/*!**********************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/utils/bytecode/extractIPFS.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractIPFSUri: function() { return /* binding */ extractIPFSUri; }\n/* harmony export */ });\n/* harmony import */ var _base58_encode_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../base58/encode.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/base58/encode.js\");\n/* harmony import */ var _encoding_to_bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../encoding/to-bytes.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/encoding/to-bytes.js\");\n/* harmony import */ var _cbor_decode_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cbor-decode.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/bytecode/cbor-decode.js\");\n/* harmony import */ var _prefix_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./prefix.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/bytecode/prefix.js\");\n\n\n\n\n/**\n * Extracts the IPFS URI from the given bytecode.\n * @param bytecode - The bytecode to extract the IPFS URI from.\n * @returns The IPFS URI if found, otherwise undefined.\n * @example\n * ```ts\n * import { extractIPFSUri } from \"thirdweb/utils/bytecode/extractIPFS\";\n * const bytecode = \"0x363d3d373d3d3d363d30545af43d82803e903d91601857fd5bf3\";\n * const ipfsHash = extractIPFSUri(bytecode);\n * console.log(ipfsHash);\n * ```\n * @utils\n */ function extractIPFSUri(bytecode) {\n    const numericBytecode = (0,_encoding_to_bytes_js__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)((0,_prefix_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytecodePrefix)(bytecode));\n    const cborLength = // @ts-expect-error - TS doesn't like this, but it's fine\n    numericBytecode[numericBytecode.length - 2] * 0x100 + // @ts-expect-error - TS doesn't like this, but it's fine\n    numericBytecode[numericBytecode.length - 1];\n    const cborStart = numericBytecode.length - 2 - cborLength;\n    // if the cborStart is invalid, return undefined\n    if (cborStart < 0 || cborStart > numericBytecode.length) {\n        return undefined;\n    }\n    const bytecodeBuffer = numericBytecode.slice(cborStart, -2);\n    const cborData = (0,_cbor_decode_js__WEBPACK_IMPORTED_MODULE_2__.decode)(bytecodeBuffer);\n    if (\"ipfs\" in cborData) {\n        return \"ipfs://\".concat((0,_base58_encode_js__WEBPACK_IMPORTED_MODULE_3__.base58Encode)(cborData.ipfs));\n    }\n    return undefined;\n} //# sourceMappingURL=extractIPFS.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS91dGlscy9ieXRlY29kZS9leHRyYWN0SVBGUy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFtRDtBQUNFO0FBQ1g7QUFDUztBQUNuRDs7Ozs7Ozs7Ozs7O0NBWUMsR0FDTSxTQUFTSSxlQUFlQyxRQUFRO0lBQ25DLE1BQU1DLGtCQUFrQkwsaUVBQVVBLENBQUNFLGdFQUFvQkEsQ0FBQ0U7SUFDeEQsTUFBTUUsYUFDTix5REFBeUQ7SUFDekRELGVBQWUsQ0FBQ0EsZ0JBQWdCRSxNQUFNLEdBQUcsRUFBRSxHQUFHLFFBQzFDLHlEQUF5RDtJQUN6REYsZUFBZSxDQUFDQSxnQkFBZ0JFLE1BQU0sR0FBRyxFQUFFO0lBQy9DLE1BQU1DLFlBQVlILGdCQUFnQkUsTUFBTSxHQUFHLElBQUlEO0lBQy9DLGdEQUFnRDtJQUNoRCxJQUFJRSxZQUFZLEtBQUtBLFlBQVlILGdCQUFnQkUsTUFBTSxFQUFFO1FBQ3JELE9BQU9FO0lBQ1g7SUFDQSxNQUFNQyxpQkFBaUJMLGdCQUFnQk0sS0FBSyxDQUFDSCxXQUFXLENBQUM7SUFDekQsTUFBTUksV0FBV1gsdURBQU1BLENBQUNTO0lBQ3hCLElBQUksVUFBVUUsVUFBVTtRQUNwQixPQUFPLFVBQXNDLE9BQTVCYiwrREFBWUEsQ0FBQ2EsU0FBU0MsSUFBSTtJQUMvQztJQUNBLE9BQU9KO0FBQ1gsRUFDQSx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RoaXJkd2ViL2Rpc3QvZXNtL3V0aWxzL2J5dGVjb2RlL2V4dHJhY3RJUEZTLmpzPzc1ZGUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYmFzZTU4RW5jb2RlIH0gZnJvbSBcIi4uL2Jhc2U1OC9lbmNvZGUuanNcIjtcbmltcG9ydCB7IGhleFRvQnl0ZXMgfSBmcm9tIFwiLi4vZW5jb2RpbmcvdG8tYnl0ZXMuanNcIjtcbmltcG9ydCB7IGRlY29kZSB9IGZyb20gXCIuL2Nib3ItZGVjb2RlLmpzXCI7XG5pbXBvcnQgeyBlbnN1cmVCeXRlY29kZVByZWZpeCB9IGZyb20gXCIuL3ByZWZpeC5qc1wiO1xuLyoqXG4gKiBFeHRyYWN0cyB0aGUgSVBGUyBVUkkgZnJvbSB0aGUgZ2l2ZW4gYnl0ZWNvZGUuXG4gKiBAcGFyYW0gYnl0ZWNvZGUgLSBUaGUgYnl0ZWNvZGUgdG8gZXh0cmFjdCB0aGUgSVBGUyBVUkkgZnJvbS5cbiAqIEByZXR1cm5zIFRoZSBJUEZTIFVSSSBpZiBmb3VuZCwgb3RoZXJ3aXNlIHVuZGVmaW5lZC5cbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgZXh0cmFjdElQRlNVcmkgfSBmcm9tIFwidGhpcmR3ZWIvdXRpbHMvYnl0ZWNvZGUvZXh0cmFjdElQRlNcIjtcbiAqIGNvbnN0IGJ5dGVjb2RlID0gXCIweDM2M2QzZDM3M2QzZDNkMzYzZDMwNTQ1YWY0M2Q4MjgwM2U5MDNkOTE2MDE4NTdmZDViZjNcIjtcbiAqIGNvbnN0IGlwZnNIYXNoID0gZXh0cmFjdElQRlNVcmkoYnl0ZWNvZGUpO1xuICogY29uc29sZS5sb2coaXBmc0hhc2gpO1xuICogYGBgXG4gKiBAdXRpbHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RJUEZTVXJpKGJ5dGVjb2RlKSB7XG4gICAgY29uc3QgbnVtZXJpY0J5dGVjb2RlID0gaGV4VG9CeXRlcyhlbnN1cmVCeXRlY29kZVByZWZpeChieXRlY29kZSkpO1xuICAgIGNvbnN0IGNib3JMZW5ndGggPSBcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gVFMgZG9lc24ndCBsaWtlIHRoaXMsIGJ1dCBpdCdzIGZpbmVcbiAgICBudW1lcmljQnl0ZWNvZGVbbnVtZXJpY0J5dGVjb2RlLmxlbmd0aCAtIDJdICogMHgxMDAgK1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gVFMgZG9lc24ndCBsaWtlIHRoaXMsIGJ1dCBpdCdzIGZpbmVcbiAgICAgICAgbnVtZXJpY0J5dGVjb2RlW251bWVyaWNCeXRlY29kZS5sZW5ndGggLSAxXTtcbiAgICBjb25zdCBjYm9yU3RhcnQgPSBudW1lcmljQnl0ZWNvZGUubGVuZ3RoIC0gMiAtIGNib3JMZW5ndGg7XG4gICAgLy8gaWYgdGhlIGNib3JTdGFydCBpcyBpbnZhbGlkLCByZXR1cm4gdW5kZWZpbmVkXG4gICAgaWYgKGNib3JTdGFydCA8IDAgfHwgY2JvclN0YXJ0ID4gbnVtZXJpY0J5dGVjb2RlLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBjb25zdCBieXRlY29kZUJ1ZmZlciA9IG51bWVyaWNCeXRlY29kZS5zbGljZShjYm9yU3RhcnQsIC0yKTtcbiAgICBjb25zdCBjYm9yRGF0YSA9IGRlY29kZShieXRlY29kZUJ1ZmZlcik7XG4gICAgaWYgKFwiaXBmc1wiIGluIGNib3JEYXRhKSB7XG4gICAgICAgIHJldHVybiBgaXBmczovLyR7YmFzZTU4RW5jb2RlKGNib3JEYXRhLmlwZnMpfWA7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHRyYWN0SVBGUy5qcy5tYXAiXSwibmFtZXMiOlsiYmFzZTU4RW5jb2RlIiwiaGV4VG9CeXRlcyIsImRlY29kZSIsImVuc3VyZUJ5dGVjb2RlUHJlZml4IiwiZXh0cmFjdElQRlNVcmkiLCJieXRlY29kZSIsIm51bWVyaWNCeXRlY29kZSIsImNib3JMZW5ndGgiLCJsZW5ndGgiLCJjYm9yU3RhcnQiLCJ1bmRlZmluZWQiLCJieXRlY29kZUJ1ZmZlciIsInNsaWNlIiwiY2JvckRhdGEiLCJpcGZzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/bytecode/extractIPFS.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/bytecode/prefix.js":
/*!*****************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/utils/bytecode/prefix.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ensureBytecodePrefix: function() { return /* binding */ ensureBytecodePrefix; }\n/* harmony export */ });\n/* harmony import */ var _encoding_hex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../encoding/hex.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/encoding/helpers/is-hex.js\");\n\n/**\n * Ensures that the given bytecode has the correct prefix.\n * If the bytecode already starts with \"0x\", it is returned as is.\n * Otherwise, the prefix \"0x\" is added to the bytecode.\n * @param bytecode - The bytecode to ensure the prefix for.\n * @returns The bytecode with the correct prefix.\n * @example\n * ```ts\n * import { ensureBytecodePrefix } from \"thirdweb/utils/bytecode/prefix\";\n * const bytecode = \"363d3d373d3d3d363d30545af43d82803e903d91601857fd5bf3\";\n * const prefixedBytecode = ensureBytecodePrefix(bytecode);\n * console.log(prefixedBytecode);\n * ```\n * @utils\n */ function ensureBytecodePrefix(bytecode) {\n    if ((0,_encoding_hex_js__WEBPACK_IMPORTED_MODULE_0__.isHex)(bytecode, {\n        strict: false\n    })) {\n        return bytecode;\n    }\n    return \"0x\".concat(bytecode);\n} //# sourceMappingURL=prefix.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS91dGlscy9ieXRlY29kZS9wcmVmaXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBMkM7QUFDM0M7Ozs7Ozs7Ozs7Ozs7O0NBY0MsR0FDTSxTQUFTQyxxQkFBcUJDLFFBQVE7SUFDekMsSUFBSUYsdURBQUtBLENBQUNFLFVBQVU7UUFBRUMsUUFBUTtJQUFNLElBQUk7UUFDcEMsT0FBT0Q7SUFDWDtJQUNBLE9BQU8sS0FBYyxPQUFUQTtBQUNoQixFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvdGhpcmR3ZWIvZGlzdC9lc20vdXRpbHMvYnl0ZWNvZGUvcHJlZml4LmpzPzJiMzYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNIZXggfSBmcm9tIFwiLi4vZW5jb2RpbmcvaGV4LmpzXCI7XG4vKipcbiAqIEVuc3VyZXMgdGhhdCB0aGUgZ2l2ZW4gYnl0ZWNvZGUgaGFzIHRoZSBjb3JyZWN0IHByZWZpeC5cbiAqIElmIHRoZSBieXRlY29kZSBhbHJlYWR5IHN0YXJ0cyB3aXRoIFwiMHhcIiwgaXQgaXMgcmV0dXJuZWQgYXMgaXMuXG4gKiBPdGhlcndpc2UsIHRoZSBwcmVmaXggXCIweFwiIGlzIGFkZGVkIHRvIHRoZSBieXRlY29kZS5cbiAqIEBwYXJhbSBieXRlY29kZSAtIFRoZSBieXRlY29kZSB0byBlbnN1cmUgdGhlIHByZWZpeCBmb3IuXG4gKiBAcmV0dXJucyBUaGUgYnl0ZWNvZGUgd2l0aCB0aGUgY29ycmVjdCBwcmVmaXguXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGltcG9ydCB7IGVuc3VyZUJ5dGVjb2RlUHJlZml4IH0gZnJvbSBcInRoaXJkd2ViL3V0aWxzL2J5dGVjb2RlL3ByZWZpeFwiO1xuICogY29uc3QgYnl0ZWNvZGUgPSBcIjM2M2QzZDM3M2QzZDNkMzYzZDMwNTQ1YWY0M2Q4MjgwM2U5MDNkOTE2MDE4NTdmZDViZjNcIjtcbiAqIGNvbnN0IHByZWZpeGVkQnl0ZWNvZGUgPSBlbnN1cmVCeXRlY29kZVByZWZpeChieXRlY29kZSk7XG4gKiBjb25zb2xlLmxvZyhwcmVmaXhlZEJ5dGVjb2RlKTtcbiAqIGBgYFxuICogQHV0aWxzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbnN1cmVCeXRlY29kZVByZWZpeChieXRlY29kZSkge1xuICAgIGlmIChpc0hleChieXRlY29kZSwgeyBzdHJpY3Q6IGZhbHNlIH0pKSB7XG4gICAgICAgIHJldHVybiBieXRlY29kZTtcbiAgICB9XG4gICAgcmV0dXJuIGAweCR7Ynl0ZWNvZGV9YDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByZWZpeC5qcy5tYXAiXSwibmFtZXMiOlsiaXNIZXgiLCJlbnN1cmVCeXRlY29kZVByZWZpeCIsImJ5dGVjb2RlIiwic3RyaWN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/bytecode/prefix.js\n"));

/***/ })

}]);