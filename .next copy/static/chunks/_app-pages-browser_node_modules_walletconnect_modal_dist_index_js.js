"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_walletconnect_modal_dist_index_js"],{

/***/ "(app-pages-browser)/./node_modules/proxy-compare/dist/index.modern.js":
/*!*********************************************************!*\
  !*** ./node_modules/proxy-compare/dist/index.modern.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   affectedToPathList: function() { return /* binding */ w; },\n/* harmony export */   createProxy: function() { return /* binding */ a; },\n/* harmony export */   getUntracked: function() { return /* binding */ y; },\n/* harmony export */   isChanged: function() { return /* binding */ p; },\n/* harmony export */   markToTrack: function() { return /* binding */ h; },\n/* harmony export */   replaceNewProxy: function() { return /* binding */ O; },\n/* harmony export */   trackMemo: function() { return /* binding */ g; }\n/* harmony export */ });\nconst e = Symbol(), t = Symbol(), r = \"a\", n = \"w\";\nlet o = (e, t)=>new Proxy(e, t);\nconst s = Object.getPrototypeOf, c = new WeakMap, l = (e)=>e && (c.has(e) ? c.get(e) : s(e) === Object.prototype || s(e) === Array.prototype), f = (e)=>\"object\" == typeof e && null !== e, i = (e)=>{\n    if (Array.isArray(e)) return Array.from(e);\n    const t = Object.getOwnPropertyDescriptors(e);\n    return Object.values(t).forEach((e)=>{\n        e.configurable = !0;\n    }), Object.create(s(e), t);\n}, u = (e)=>e[t] || e, a = (s, c, f, p)=>{\n    if (!l(s)) return s;\n    let g = p && p.get(s);\n    if (!g) {\n        const e = u(s);\n        g = ((e)=>Object.values(Object.getOwnPropertyDescriptors(e)).some((e)=>!e.configurable && !e.writable))(e) ? [\n            e,\n            i(e)\n        ] : [\n            e\n        ], null == p || p.set(s, g);\n    }\n    const [y, h] = g;\n    let w = f && f.get(y);\n    return w && w[1].f === !!h || (w = ((o, s)=>{\n        const c = {\n            f: s\n        };\n        let l = !1;\n        const f = (e, t)=>{\n            if (!l) {\n                let s = c[r].get(o);\n                if (s || (s = {}, c[r].set(o, s)), e === n) s[n] = !0;\n                else {\n                    let r = s[e];\n                    r || (r = new Set, s[e] = r), r.add(t);\n                }\n            }\n        }, i = {\n            get: (e, n)=>n === t ? o : (f(\"k\", n), a(Reflect.get(e, n), c[r], c.c, c.t)),\n            has: (t, n)=>n === e ? (l = !0, c[r].delete(o), !0) : (f(\"h\", n), Reflect.has(t, n)),\n            getOwnPropertyDescriptor: (e, t)=>(f(\"o\", t), Reflect.getOwnPropertyDescriptor(e, t)),\n            ownKeys: (e)=>(f(n), Reflect.ownKeys(e))\n        };\n        return s && (i.set = i.deleteProperty = ()=>!1), [\n            i,\n            c\n        ];\n    })(y, !!h), w[1].p = o(h || y, w[0]), f && f.set(y, w)), w[1][r] = c, w[1].c = f, w[1].t = p, w[1].p;\n}, p = (e, t, r, o)=>{\n    if (Object.is(e, t)) return !1;\n    if (!f(e) || !f(t)) return !0;\n    const s = r.get(u(e));\n    if (!s) return !0;\n    if (o) {\n        const r = o.get(e);\n        if (r && r.n === t) return r.g;\n        o.set(e, {\n            n: t,\n            g: !1\n        });\n    }\n    let c = null;\n    try {\n        for (const r of s.h || [])if (c = Reflect.has(e, r) !== Reflect.has(t, r), c) return c;\n        if (!0 === s[n]) {\n            if (c = ((e, t)=>{\n                const r = Reflect.ownKeys(e), n = Reflect.ownKeys(t);\n                return r.length !== n.length || r.some((e, t)=>e !== n[t]);\n            })(e, t), c) return c;\n        } else for (const r of s.o || [])if (c = !!Reflect.getOwnPropertyDescriptor(e, r) != !!Reflect.getOwnPropertyDescriptor(t, r), c) return c;\n        for (const n of s.k || [])if (c = p(e[n], t[n], r, o), c) return c;\n        return null === c && (c = !0), c;\n    } finally{\n        o && o.set(e, {\n            n: t,\n            g: c\n        });\n    }\n}, g = (t)=>!!l(t) && e in t, y = (e)=>l(e) && e[t] || null, h = function(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;\n    c.set(e, t);\n}, w = (e, t, r)=>{\n    const o = [], s = new WeakSet, c = (e, l)=>{\n        if (s.has(e)) return;\n        f(e) && s.add(e);\n        const i = f(e) && t.get(u(e));\n        if (i) {\n            var a, p;\n            if (null == (a = i.h) || a.forEach((e)=>{\n                const t = \":has(\".concat(String(e), \")\");\n                o.push(l ? [\n                    ...l,\n                    t\n                ] : [\n                    t\n                ]);\n            }), !0 === i[n]) {\n                const e = \":ownKeys\";\n                o.push(l ? [\n                    ...l,\n                    e\n                ] : [\n                    e\n                ]);\n            } else {\n                var g;\n                null == (g = i.o) || g.forEach((e)=>{\n                    const t = \":hasOwn(\".concat(String(e), \")\");\n                    o.push(l ? [\n                        ...l,\n                        t\n                    ] : [\n                        t\n                    ]);\n                });\n            }\n            null == (p = i.k) || p.forEach((t)=>{\n                r && !(\"value\" in (Object.getOwnPropertyDescriptor(e, t) || {})) || c(e[t], l ? [\n                    ...l,\n                    t\n                ] : [\n                    t\n                ]);\n            });\n        } else l && o.push(l);\n    };\n    return c(e), o;\n}, O = (e)=>{\n    o = e;\n};\n //# sourceMappingURL=index.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/proxy-compare/dist/index.modern.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/modal-core/dist/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@walletconnect/modal-core/dist/index.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConfigCtrl: function() { return /* binding */ ConfigCtrl; },\n/* harmony export */   CoreUtil: function() { return /* binding */ CoreUtil; },\n/* harmony export */   EventsCtrl: function() { return /* binding */ EventsCtrl; },\n/* harmony export */   ExplorerCtrl: function() { return /* binding */ ExplorerCtrl; },\n/* harmony export */   ModalCtrl: function() { return /* binding */ ModalCtrl; },\n/* harmony export */   OptionsCtrl: function() { return /* binding */ OptionsCtrl; },\n/* harmony export */   RouterCtrl: function() { return /* binding */ RouterCtrl; },\n/* harmony export */   ThemeCtrl: function() { return /* binding */ ThemeCtrl; },\n/* harmony export */   ToastCtrl: function() { return /* binding */ ToastCtrl; }\n/* harmony export */ });\n/* harmony import */ var valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! valtio/vanilla */ \"(app-pages-browser)/./node_modules/valtio/esm/vanilla.mjs\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/./node_modules/next/dist/compiled/buffer/index.js\")[\"Buffer\"];\n\nconst state$7 = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({\n    history: [\n        \"ConnectWallet\"\n    ],\n    view: \"ConnectWallet\",\n    data: void 0\n});\nconst RouterCtrl = {\n    state: state$7,\n    subscribe (callback) {\n        return (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(state$7, ()=>callback(state$7));\n    },\n    push (view, data) {\n        if (view !== state$7.view) {\n            state$7.view = view;\n            if (data) {\n                state$7.data = data;\n            }\n            state$7.history.push(view);\n        }\n    },\n    reset (view) {\n        state$7.view = view;\n        state$7.history = [\n            view\n        ];\n    },\n    replace (view) {\n        if (state$7.history.length > 1) {\n            state$7.history[state$7.history.length - 1] = view;\n            state$7.view = view;\n        }\n    },\n    goBack () {\n        if (state$7.history.length > 1) {\n            state$7.history.pop();\n            const [last] = state$7.history.slice(-1);\n            state$7.view = last;\n        }\n    },\n    setData (data) {\n        state$7.data = data;\n    }\n};\nconst CoreUtil = {\n    WALLETCONNECT_DEEPLINK_CHOICE: \"WALLETCONNECT_DEEPLINK_CHOICE\",\n    WCM_VERSION: \"WCM_VERSION\",\n    RECOMMENDED_WALLET_AMOUNT: 9,\n    isMobile () {\n        if (true) {\n            return Boolean(window.matchMedia(\"(pointer:coarse)\").matches || /Android|webOS|iPhone|iPad|iPod|BlackBerry|Opera Mini/u.test(navigator.userAgent));\n        }\n        return false;\n    },\n    isAndroid () {\n        return CoreUtil.isMobile() && navigator.userAgent.toLowerCase().includes(\"android\");\n    },\n    isIos () {\n        const ua = navigator.userAgent.toLowerCase();\n        return CoreUtil.isMobile() && (ua.includes(\"iphone\") || ua.includes(\"ipad\"));\n    },\n    isHttpUrl (url) {\n        return url.startsWith(\"http://\") || url.startsWith(\"https://\");\n    },\n    isArray (data) {\n        return Array.isArray(data) && data.length > 0;\n    },\n    isTelegram () {\n        return  true && // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (Boolean(window.TelegramWebviewProxy) || // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Boolean(window.Telegram) || // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Boolean(window.TelegramWebviewProxyProto));\n    },\n    formatNativeUrl (appUrl, wcUri, name) {\n        if (CoreUtil.isHttpUrl(appUrl)) {\n            return this.formatUniversalUrl(appUrl, wcUri, name);\n        }\n        let safeAppUrl = appUrl;\n        if (!safeAppUrl.includes(\"://\")) {\n            safeAppUrl = appUrl.replaceAll(\"/\", \"\").replaceAll(\":\", \"\");\n            safeAppUrl = \"\".concat(safeAppUrl, \"://\");\n        }\n        if (!safeAppUrl.endsWith(\"/\")) {\n            safeAppUrl = \"\".concat(safeAppUrl, \"/\");\n        }\n        this.setWalletConnectDeepLink(safeAppUrl, name);\n        const encodedWcUrl = encodeURIComponent(wcUri);\n        return \"\".concat(safeAppUrl, \"wc?uri=\").concat(encodedWcUrl);\n    },\n    formatUniversalUrl (appUrl, wcUri, name) {\n        if (!CoreUtil.isHttpUrl(appUrl)) {\n            return this.formatNativeUrl(appUrl, wcUri, name);\n        }\n        let safeAppUrl = appUrl;\n        if (safeAppUrl.startsWith(\"https://t.me\")) {\n            const formattedUri = Buffer.from(wcUri).toString(\"base64\").replace(/[=]/g, \"\");\n            if (safeAppUrl.endsWith(\"/\")) {\n                safeAppUrl = safeAppUrl.slice(0, -1);\n            }\n            this.setWalletConnectDeepLink(safeAppUrl, name);\n            const url = new URL(safeAppUrl);\n            url.searchParams.set(\"startapp\", formattedUri);\n            const link = url.toString();\n            return link;\n        }\n        if (!safeAppUrl.endsWith(\"/\")) {\n            safeAppUrl = \"\".concat(safeAppUrl, \"/\");\n        }\n        this.setWalletConnectDeepLink(safeAppUrl, name);\n        const encodedWcUrl = encodeURIComponent(wcUri);\n        return \"\".concat(safeAppUrl, \"wc?uri=\").concat(encodedWcUrl);\n    },\n    async wait (miliseconds) {\n        return new Promise((resolve)=>{\n            setTimeout(resolve, miliseconds);\n        });\n    },\n    openHref (href, target) {\n        const adjustedTarget = this.isTelegram() ? \"_blank\" : target;\n        window.open(href, adjustedTarget, \"noreferrer noopener\");\n    },\n    setWalletConnectDeepLink (href, name) {\n        try {\n            localStorage.setItem(CoreUtil.WALLETCONNECT_DEEPLINK_CHOICE, JSON.stringify({\n                href,\n                name\n            }));\n        } catch (e) {\n            console.info(\"Unable to set WalletConnect deep link\");\n        }\n    },\n    setWalletConnectAndroidDeepLink (wcUri) {\n        try {\n            const [href] = wcUri.split(\"?\");\n            localStorage.setItem(CoreUtil.WALLETCONNECT_DEEPLINK_CHOICE, JSON.stringify({\n                href,\n                name: \"Android\"\n            }));\n        } catch (e) {\n            console.info(\"Unable to set WalletConnect android deep link\");\n        }\n    },\n    removeWalletConnectDeepLink () {\n        try {\n            localStorage.removeItem(CoreUtil.WALLETCONNECT_DEEPLINK_CHOICE);\n        } catch (e) {\n            console.info(\"Unable to remove WalletConnect deep link\");\n        }\n    },\n    setModalVersionInStorage () {\n        try {\n            if (typeof localStorage !== \"undefined\") {\n                localStorage.setItem(CoreUtil.WCM_VERSION, \"2.7.0\");\n            }\n        } catch (e) {\n            console.info(\"Unable to set Web3Modal version in storage\");\n        }\n    },\n    getWalletRouterData () {\n        var _a;\n        const routerData = (_a = RouterCtrl.state.data) == null ? void 0 : _a.Wallet;\n        if (!routerData) {\n            throw new Error('Missing \"Wallet\" view data');\n        }\n        return routerData;\n    }\n};\nconst isEnabled = typeof location !== \"undefined\" && (location.hostname.includes(\"localhost\") || location.protocol.includes(\"https\"));\nconst state$6 = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({\n    enabled: isEnabled,\n    userSessionId: \"\",\n    events: [],\n    connectedWalletId: void 0\n});\nconst EventsCtrl = {\n    state: state$6,\n    subscribe (callback) {\n        return (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(state$6.events, ()=>callback((0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.snapshot)(state$6.events[state$6.events.length - 1])));\n    },\n    initialize () {\n        if (state$6.enabled && typeof (crypto == null ? void 0 : crypto.randomUUID) !== \"undefined\") {\n            state$6.userSessionId = crypto.randomUUID();\n        }\n    },\n    setConnectedWalletId (connectedWalletId) {\n        state$6.connectedWalletId = connectedWalletId;\n    },\n    click (data) {\n        if (state$6.enabled) {\n            const event = {\n                type: \"CLICK\",\n                name: data.name,\n                userSessionId: state$6.userSessionId,\n                timestamp: Date.now(),\n                data\n            };\n            state$6.events.push(event);\n        }\n    },\n    track (data) {\n        if (state$6.enabled) {\n            const event = {\n                type: \"TRACK\",\n                name: data.name,\n                userSessionId: state$6.userSessionId,\n                timestamp: Date.now(),\n                data\n            };\n            state$6.events.push(event);\n        }\n    },\n    view (data) {\n        if (state$6.enabled) {\n            const event = {\n                type: \"VIEW\",\n                name: data.name,\n                userSessionId: state$6.userSessionId,\n                timestamp: Date.now(),\n                data\n            };\n            state$6.events.push(event);\n        }\n    }\n};\nconst state$5 = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({\n    chains: void 0,\n    walletConnectUri: void 0,\n    isAuth: false,\n    isCustomDesktop: false,\n    isCustomMobile: false,\n    isDataLoaded: false,\n    isUiLoaded: false\n});\nconst OptionsCtrl = {\n    state: state$5,\n    subscribe (callback) {\n        return (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(state$5, ()=>callback(state$5));\n    },\n    setChains (chains) {\n        state$5.chains = chains;\n    },\n    setWalletConnectUri (walletConnectUri) {\n        state$5.walletConnectUri = walletConnectUri;\n    },\n    setIsCustomDesktop (isCustomDesktop) {\n        state$5.isCustomDesktop = isCustomDesktop;\n    },\n    setIsCustomMobile (isCustomMobile) {\n        state$5.isCustomMobile = isCustomMobile;\n    },\n    setIsDataLoaded (isDataLoaded) {\n        state$5.isDataLoaded = isDataLoaded;\n    },\n    setIsUiLoaded (isUiLoaded) {\n        state$5.isUiLoaded = isUiLoaded;\n    },\n    setIsAuth (isAuth) {\n        state$5.isAuth = isAuth;\n    }\n};\nconst state$4 = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({\n    projectId: \"\",\n    mobileWallets: void 0,\n    desktopWallets: void 0,\n    walletImages: void 0,\n    chains: void 0,\n    enableAuthMode: false,\n    enableExplorer: true,\n    explorerExcludedWalletIds: void 0,\n    explorerRecommendedWalletIds: void 0,\n    termsOfServiceUrl: void 0,\n    privacyPolicyUrl: void 0\n});\nconst ConfigCtrl = {\n    state: state$4,\n    subscribe (callback) {\n        return (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(state$4, ()=>callback(state$4));\n    },\n    setConfig (config) {\n        var _a, _b;\n        EventsCtrl.initialize();\n        OptionsCtrl.setChains(config.chains);\n        OptionsCtrl.setIsAuth(Boolean(config.enableAuthMode));\n        OptionsCtrl.setIsCustomMobile(Boolean((_a = config.mobileWallets) == null ? void 0 : _a.length));\n        OptionsCtrl.setIsCustomDesktop(Boolean((_b = config.desktopWallets) == null ? void 0 : _b.length));\n        CoreUtil.setModalVersionInStorage();\n        Object.assign(state$4, config);\n    }\n};\nvar __defProp$2 = Object.defineProperty;\nvar __getOwnPropSymbols$2 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$2 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$2 = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp$2 = (obj, key, value)=>key in obj ? __defProp$2(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues$2 = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp$2.call(b, prop)) __defNormalProp$2(a, prop, b[prop]);\n    if (__getOwnPropSymbols$2) for (var prop of __getOwnPropSymbols$2(b)){\n        if (__propIsEnum$2.call(b, prop)) __defNormalProp$2(a, prop, b[prop]);\n    }\n    return a;\n};\nconst W3M_API = \"https://explorer-api.walletconnect.com\";\nconst SDK_TYPE = \"wcm\";\nconst SDK_VERSION = \"js-2.7.0\";\nasync function fetchListings(endpoint, params) {\n    const allParams = __spreadValues$2({\n        sdkType: SDK_TYPE,\n        sdkVersion: SDK_VERSION\n    }, params);\n    const url = new URL(endpoint, W3M_API);\n    url.searchParams.append(\"projectId\", ConfigCtrl.state.projectId);\n    Object.entries(allParams).forEach((param)=>{\n        let [key, value] = param;\n        if (value) {\n            url.searchParams.append(key, String(value));\n        }\n    });\n    const request = await fetch(url);\n    return request.json();\n}\nconst ExplorerUtil = {\n    async getDesktopListings (params) {\n        return fetchListings(\"/w3m/v1/getDesktopListings\", params);\n    },\n    async getMobileListings (params) {\n        return fetchListings(\"/w3m/v1/getMobileListings\", params);\n    },\n    async getInjectedListings (params) {\n        return fetchListings(\"/w3m/v1/getInjectedListings\", params);\n    },\n    async getAllListings (params) {\n        return fetchListings(\"/w3m/v1/getAllListings\", params);\n    },\n    getWalletImageUrl (imageId) {\n        return \"\".concat(W3M_API, \"/w3m/v1/getWalletImage/\").concat(imageId, \"?projectId=\").concat(ConfigCtrl.state.projectId, \"&sdkType=\").concat(SDK_TYPE, \"&sdkVersion=\").concat(SDK_VERSION);\n    },\n    getAssetImageUrl (imageId) {\n        return \"\".concat(W3M_API, \"/w3m/v1/getAssetImage/\").concat(imageId, \"?projectId=\").concat(ConfigCtrl.state.projectId, \"&sdkType=\").concat(SDK_TYPE, \"&sdkVersion=\").concat(SDK_VERSION);\n    }\n};\nvar __defProp$1 = Object.defineProperty;\nvar __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$1 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$1 = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp$1 = (obj, key, value)=>key in obj ? __defProp$1(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues$1 = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp$1.call(b, prop)) __defNormalProp$1(a, prop, b[prop]);\n    if (__getOwnPropSymbols$1) for (var prop of __getOwnPropSymbols$1(b)){\n        if (__propIsEnum$1.call(b, prop)) __defNormalProp$1(a, prop, b[prop]);\n    }\n    return a;\n};\nconst isMobile = CoreUtil.isMobile();\nconst state$3 = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({\n    wallets: {\n        listings: [],\n        total: 0,\n        page: 1\n    },\n    search: {\n        listings: [],\n        total: 0,\n        page: 1\n    },\n    recomendedWallets: []\n});\nconst ExplorerCtrl = {\n    state: state$3,\n    async getRecomendedWallets () {\n        const { explorerRecommendedWalletIds, explorerExcludedWalletIds } = ConfigCtrl.state;\n        if (explorerRecommendedWalletIds === \"NONE\" || explorerExcludedWalletIds === \"ALL\" && !explorerRecommendedWalletIds) {\n            return state$3.recomendedWallets;\n        }\n        if (CoreUtil.isArray(explorerRecommendedWalletIds)) {\n            const recommendedIds = explorerRecommendedWalletIds.join(\",\");\n            const params = {\n                recommendedIds\n            };\n            const { listings } = await ExplorerUtil.getAllListings(params);\n            const listingsArr = Object.values(listings);\n            listingsArr.sort((a, b)=>{\n                const aIndex = explorerRecommendedWalletIds.indexOf(a.id);\n                const bIndex = explorerRecommendedWalletIds.indexOf(b.id);\n                return aIndex - bIndex;\n            });\n            state$3.recomendedWallets = listingsArr;\n        } else {\n            const { chains, isAuth } = OptionsCtrl.state;\n            const chainsFilter = chains == null ? void 0 : chains.join(\",\");\n            const isExcluded = CoreUtil.isArray(explorerExcludedWalletIds);\n            const params = {\n                page: 1,\n                sdks: isAuth ? \"auth_v1\" : void 0,\n                entries: CoreUtil.RECOMMENDED_WALLET_AMOUNT,\n                chains: chainsFilter,\n                version: 2,\n                excludedIds: isExcluded ? explorerExcludedWalletIds.join(\",\") : void 0\n            };\n            const { listings } = isMobile ? await ExplorerUtil.getMobileListings(params) : await ExplorerUtil.getDesktopListings(params);\n            state$3.recomendedWallets = Object.values(listings);\n        }\n        return state$3.recomendedWallets;\n    },\n    async getWallets (params) {\n        const extendedParams = __spreadValues$1({}, params);\n        const { explorerRecommendedWalletIds, explorerExcludedWalletIds } = ConfigCtrl.state;\n        const { recomendedWallets } = state$3;\n        if (explorerExcludedWalletIds === \"ALL\") {\n            return state$3.wallets;\n        }\n        if (recomendedWallets.length) {\n            extendedParams.excludedIds = recomendedWallets.map((wallet)=>wallet.id).join(\",\");\n        } else if (CoreUtil.isArray(explorerRecommendedWalletIds)) {\n            extendedParams.excludedIds = explorerRecommendedWalletIds.join(\",\");\n        }\n        if (CoreUtil.isArray(explorerExcludedWalletIds)) {\n            extendedParams.excludedIds = [\n                extendedParams.excludedIds,\n                explorerExcludedWalletIds\n            ].filter(Boolean).join(\",\");\n        }\n        if (OptionsCtrl.state.isAuth) {\n            extendedParams.sdks = \"auth_v1\";\n        }\n        const { page, search } = params;\n        const { listings: listingsObj, total } = isMobile ? await ExplorerUtil.getMobileListings(extendedParams) : await ExplorerUtil.getDesktopListings(extendedParams);\n        const listings = Object.values(listingsObj);\n        const type = search ? \"search\" : \"wallets\";\n        state$3[type] = {\n            listings: [\n                ...state$3[type].listings,\n                ...listings\n            ],\n            total,\n            page: page != null ? page : 1\n        };\n        return {\n            listings,\n            total\n        };\n    },\n    getWalletImageUrl (imageId) {\n        return ExplorerUtil.getWalletImageUrl(imageId);\n    },\n    getAssetImageUrl (imageId) {\n        return ExplorerUtil.getAssetImageUrl(imageId);\n    },\n    resetSearch () {\n        state$3.search = {\n            listings: [],\n            total: 0,\n            page: 1\n        };\n    }\n};\nconst state$2 = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({\n    open: false\n});\nconst ModalCtrl = {\n    state: state$2,\n    subscribe (callback) {\n        return (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(state$2, ()=>callback(state$2));\n    },\n    async open (options) {\n        return new Promise((resolve)=>{\n            const { isUiLoaded, isDataLoaded } = OptionsCtrl.state;\n            CoreUtil.removeWalletConnectDeepLink();\n            OptionsCtrl.setWalletConnectUri(options == null ? void 0 : options.uri);\n            OptionsCtrl.setChains(options == null ? void 0 : options.chains);\n            RouterCtrl.reset(\"ConnectWallet\");\n            if (isUiLoaded && isDataLoaded) {\n                state$2.open = true;\n                resolve();\n            } else {\n                const interval = setInterval(()=>{\n                    const opts = OptionsCtrl.state;\n                    if (opts.isUiLoaded && opts.isDataLoaded) {\n                        clearInterval(interval);\n                        state$2.open = true;\n                        resolve();\n                    }\n                }, 200);\n            }\n        });\n    },\n    close () {\n        state$2.open = false;\n    }\n};\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    }\n    return a;\n};\nfunction isDarkMode() {\n    return typeof matchMedia !== \"undefined\" && matchMedia(\"(prefers-color-scheme: dark)\").matches;\n}\nconst state$1 = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({\n    themeMode: isDarkMode() ? \"dark\" : \"light\"\n});\nconst ThemeCtrl = {\n    state: state$1,\n    subscribe (callback) {\n        return (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(state$1, ()=>callback(state$1));\n    },\n    setThemeConfig (theme) {\n        const { themeMode, themeVariables } = theme;\n        if (themeMode) {\n            state$1.themeMode = themeMode;\n        }\n        if (themeVariables) {\n            state$1.themeVariables = __spreadValues({}, themeVariables);\n        }\n    }\n};\nconst state = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({\n    open: false,\n    message: \"\",\n    variant: \"success\"\n});\nconst ToastCtrl = {\n    state,\n    subscribe (callback) {\n        return (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(state, ()=>callback(state));\n    },\n    openToast (message, variant) {\n        state.open = true;\n        state.message = message;\n        state.variant = variant;\n    },\n    closeToast () {\n        state.open = false;\n    }\n};\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/modal-core/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/modal/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@walletconnect/modal/dist/index.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WalletConnectModal: function() { return /* binding */ WalletConnectModal; }\n/* harmony export */ });\n/* harmony import */ var _walletconnect_modal_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/modal-core */ \"(app-pages-browser)/./node_modules/@walletconnect/modal-core/dist/index.js\");\n\nclass WalletConnectModal {\n    async initUi() {\n        if (true) {\n            await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_walletconnect_modal-ui_dist_index_js\").then(__webpack_require__.bind(__webpack_require__, /*! @walletconnect/modal-ui */ \"(app-pages-browser)/./node_modules/@walletconnect/modal-ui/dist/index.js\"));\n            const modal = document.createElement(\"wcm-modal\");\n            document.body.insertAdjacentElement(\"beforeend\", modal);\n            _walletconnect_modal_core__WEBPACK_IMPORTED_MODULE_0__.OptionsCtrl.setIsUiLoaded(true);\n        }\n    }\n    constructor(config){\n        this.openModal = _walletconnect_modal_core__WEBPACK_IMPORTED_MODULE_0__.ModalCtrl.open;\n        this.closeModal = _walletconnect_modal_core__WEBPACK_IMPORTED_MODULE_0__.ModalCtrl.close;\n        this.subscribeModal = _walletconnect_modal_core__WEBPACK_IMPORTED_MODULE_0__.ModalCtrl.subscribe;\n        this.setTheme = _walletconnect_modal_core__WEBPACK_IMPORTED_MODULE_0__.ThemeCtrl.setThemeConfig;\n        _walletconnect_modal_core__WEBPACK_IMPORTED_MODULE_0__.ThemeCtrl.setThemeConfig(config);\n        _walletconnect_modal_core__WEBPACK_IMPORTED_MODULE_0__.ConfigCtrl.setConfig(config);\n        this.initUi();\n    }\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9tb2RhbC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTBGO0FBRTFGLE1BQU1JO0lBVUosTUFBTUMsU0FBUztRQUNiLElBQUksSUFBNkIsRUFBRTtZQUNqQyxNQUFNLDRRQUFPO1lBQ2IsTUFBTUMsUUFBUUMsU0FBU0MsYUFBYSxDQUFDO1lBQ3JDRCxTQUFTRSxJQUFJLENBQUNDLHFCQUFxQixDQUFDLGFBQWFKO1lBQ2pESCxrRUFBV0EsQ0FBQ1EsYUFBYSxDQUFDO1FBQzVCO0lBQ0Y7SUFoQkFDLFlBQVlDLE1BQU0sQ0FBRTtRQUNsQixJQUFJLENBQUNDLFNBQVMsR0FBR2QsZ0VBQVNBLENBQUNlLElBQUk7UUFDL0IsSUFBSSxDQUFDQyxVQUFVLEdBQUdoQixnRUFBU0EsQ0FBQ2lCLEtBQUs7UUFDakMsSUFBSSxDQUFDQyxjQUFjLEdBQUdsQixnRUFBU0EsQ0FBQ21CLFNBQVM7UUFDekMsSUFBSSxDQUFDQyxRQUFRLEdBQUduQixnRUFBU0EsQ0FBQ29CLGNBQWM7UUFDeENwQixnRUFBU0EsQ0FBQ29CLGNBQWMsQ0FBQ1I7UUFDekJYLGlFQUFVQSxDQUFDb0IsU0FBUyxDQUFDVDtRQUNyQixJQUFJLENBQUNSLE1BQU07SUFDYjtBQVNGO0FBRThCLENBQzlCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvbW9kYWwvZGlzdC9pbmRleC5qcz9kZTFlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZGFsQ3RybCwgVGhlbWVDdHJsLCBDb25maWdDdHJsLCBPcHRpb25zQ3RybCB9IGZyb20gJ0B3YWxsZXRjb25uZWN0L21vZGFsLWNvcmUnO1xuXG5jbGFzcyBXYWxsZXRDb25uZWN0TW9kYWwge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB0aGlzLm9wZW5Nb2RhbCA9IE1vZGFsQ3RybC5vcGVuO1xuICAgIHRoaXMuY2xvc2VNb2RhbCA9IE1vZGFsQ3RybC5jbG9zZTtcbiAgICB0aGlzLnN1YnNjcmliZU1vZGFsID0gTW9kYWxDdHJsLnN1YnNjcmliZTtcbiAgICB0aGlzLnNldFRoZW1lID0gVGhlbWVDdHJsLnNldFRoZW1lQ29uZmlnO1xuICAgIFRoZW1lQ3RybC5zZXRUaGVtZUNvbmZpZyhjb25maWcpO1xuICAgIENvbmZpZ0N0cmwuc2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgdGhpcy5pbml0VWkoKTtcbiAgfVxuICBhc3luYyBpbml0VWkoKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGF3YWl0IGltcG9ydCgnQHdhbGxldGNvbm5lY3QvbW9kYWwtdWknKTtcbiAgICAgIGNvbnN0IG1vZGFsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIndjbS1tb2RhbFwiKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFwiYmVmb3JlZW5kXCIsIG1vZGFsKTtcbiAgICAgIE9wdGlvbnNDdHJsLnNldElzVWlMb2FkZWQodHJ1ZSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB7IFdhbGxldENvbm5lY3RNb2RhbCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOlsiTW9kYWxDdHJsIiwiVGhlbWVDdHJsIiwiQ29uZmlnQ3RybCIsIk9wdGlvbnNDdHJsIiwiV2FsbGV0Q29ubmVjdE1vZGFsIiwiaW5pdFVpIiwibW9kYWwiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJib2R5IiwiaW5zZXJ0QWRqYWNlbnRFbGVtZW50Iiwic2V0SXNVaUxvYWRlZCIsImNvbnN0cnVjdG9yIiwiY29uZmlnIiwib3Blbk1vZGFsIiwib3BlbiIsImNsb3NlTW9kYWwiLCJjbG9zZSIsInN1YnNjcmliZU1vZGFsIiwic3Vic2NyaWJlIiwic2V0VGhlbWUiLCJzZXRUaGVtZUNvbmZpZyIsInNldENvbmZpZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/modal/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/valtio/esm/vanilla.mjs":
/*!*********************************************!*\
  !*** ./node_modules/valtio/esm/vanilla.mjs ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getVersion: function() { return /* binding */ getVersion; },\n/* harmony export */   proxy: function() { return /* binding */ proxy; },\n/* harmony export */   ref: function() { return /* binding */ ref; },\n/* harmony export */   snapshot: function() { return /* binding */ snapshot; },\n/* harmony export */   subscribe: function() { return /* binding */ subscribe; },\n/* harmony export */   unstable_buildProxyFunction: function() { return /* binding */ unstable_buildProxyFunction; }\n/* harmony export */ });\n/* harmony import */ var proxy_compare__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! proxy-compare */ \"(app-pages-browser)/./node_modules/proxy-compare/dist/index.modern.js\");\n\nconst isObject = (x)=>typeof x === \"object\" && x !== null;\nconst proxyStateMap = /* @__PURE__ */ new WeakMap();\nconst refSet = /* @__PURE__ */ new WeakSet();\nconst buildProxyFunction = function() {\n    let objectIs = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : Object.is, newProxy = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : (target, handler)=>new Proxy(target, handler), canProxy = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : (x)=>isObject(x) && !refSet.has(x) && (Array.isArray(x) || !(Symbol.iterator in x)) && !(x instanceof WeakMap) && !(x instanceof WeakSet) && !(x instanceof Error) && !(x instanceof Number) && !(x instanceof Date) && !(x instanceof String) && !(x instanceof RegExp) && !(x instanceof ArrayBuffer), defaultHandlePromise = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : (promise)=>{\n        switch(promise.status){\n            case \"fulfilled\":\n                return promise.value;\n            case \"rejected\":\n                throw promise.reason;\n            default:\n                throw promise;\n        }\n    }, snapCache = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : /* @__PURE__ */ new WeakMap(), createSnapshot = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : function(target, version) {\n        let handlePromise = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultHandlePromise;\n        const cache = snapCache.get(target);\n        if ((cache == null ? void 0 : cache[0]) === version) {\n            return cache[1];\n        }\n        const snap = Array.isArray(target) ? [] : Object.create(Object.getPrototypeOf(target));\n        (0,proxy_compare__WEBPACK_IMPORTED_MODULE_0__.markToTrack)(snap, true);\n        snapCache.set(target, [\n            version,\n            snap\n        ]);\n        Reflect.ownKeys(target).forEach((key)=>{\n            if (Object.getOwnPropertyDescriptor(snap, key)) {\n                return;\n            }\n            const value = Reflect.get(target, key);\n            const desc = {\n                value,\n                enumerable: true,\n                // This is intentional to avoid copying with proxy-compare.\n                // It's still non-writable, so it avoids assigning a value.\n                configurable: true\n            };\n            if (refSet.has(value)) {\n                (0,proxy_compare__WEBPACK_IMPORTED_MODULE_0__.markToTrack)(value, false);\n            } else if (value instanceof Promise) {\n                delete desc.value;\n                desc.get = ()=>handlePromise(value);\n            } else if (proxyStateMap.has(value)) {\n                const [target2, ensureVersion] = proxyStateMap.get(value);\n                desc.value = createSnapshot(target2, ensureVersion(), handlePromise);\n            }\n            Object.defineProperty(snap, key, desc);\n        });\n        return Object.preventExtensions(snap);\n    }, proxyCache = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : /* @__PURE__ */ new WeakMap(), versionHolder = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : [\n        1,\n        1\n    ], proxyFunction = arguments.length > 8 && arguments[8] !== void 0 ? arguments[8] : (initialObject)=>{\n        if (!isObject(initialObject)) {\n            throw new Error(\"object required\");\n        }\n        const found = proxyCache.get(initialObject);\n        if (found) {\n            return found;\n        }\n        let version = versionHolder[0];\n        const listeners = /* @__PURE__ */ new Set();\n        const notifyUpdate = function(op) {\n            let nextVersion = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : ++versionHolder[0];\n            if (version !== nextVersion) {\n                version = nextVersion;\n                listeners.forEach((listener)=>listener(op, nextVersion));\n            }\n        };\n        let checkVersion = versionHolder[1];\n        const ensureVersion = function() {\n            let nextCheckVersion = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ++versionHolder[1];\n            if (checkVersion !== nextCheckVersion && !listeners.size) {\n                checkVersion = nextCheckVersion;\n                propProxyStates.forEach((param)=>{\n                    let [propProxyState] = param;\n                    const propVersion = propProxyState[1](nextCheckVersion);\n                    if (propVersion > version) {\n                        version = propVersion;\n                    }\n                });\n            }\n            return version;\n        };\n        const createPropListener = (prop)=>(op, nextVersion)=>{\n                const newOp = [\n                    ...op\n                ];\n                newOp[1] = [\n                    prop,\n                    ...newOp[1]\n                ];\n                notifyUpdate(newOp, nextVersion);\n            };\n        const propProxyStates = /* @__PURE__ */ new Map();\n        const addPropListener = (prop, propProxyState)=>{\n            if (( false ? 0 : void 0) !== \"production\" && propProxyStates.has(prop)) {\n                throw new Error(\"prop listener already exists\");\n            }\n            if (listeners.size) {\n                const remove = propProxyState[3](createPropListener(prop));\n                propProxyStates.set(prop, [\n                    propProxyState,\n                    remove\n                ]);\n            } else {\n                propProxyStates.set(prop, [\n                    propProxyState\n                ]);\n            }\n        };\n        const removePropListener = (prop)=>{\n            var _a;\n            const entry = propProxyStates.get(prop);\n            if (entry) {\n                propProxyStates.delete(prop);\n                (_a = entry[1]) == null ? void 0 : _a.call(entry);\n            }\n        };\n        const addListener = (listener)=>{\n            listeners.add(listener);\n            if (listeners.size === 1) {\n                propProxyStates.forEach((param, prop)=>{\n                    let [propProxyState, prevRemove] = param;\n                    if (( false ? 0 : void 0) !== \"production\" && prevRemove) {\n                        throw new Error(\"remove already exists\");\n                    }\n                    const remove = propProxyState[3](createPropListener(prop));\n                    propProxyStates.set(prop, [\n                        propProxyState,\n                        remove\n                    ]);\n                });\n            }\n            const removeListener = ()=>{\n                listeners.delete(listener);\n                if (listeners.size === 0) {\n                    propProxyStates.forEach((param, prop)=>{\n                        let [propProxyState, remove] = param;\n                        if (remove) {\n                            remove();\n                            propProxyStates.set(prop, [\n                                propProxyState\n                            ]);\n                        }\n                    });\n                }\n            };\n            return removeListener;\n        };\n        const baseObject = Array.isArray(initialObject) ? [] : Object.create(Object.getPrototypeOf(initialObject));\n        const handler = {\n            deleteProperty (target, prop) {\n                const prevValue = Reflect.get(target, prop);\n                removePropListener(prop);\n                const deleted = Reflect.deleteProperty(target, prop);\n                if (deleted) {\n                    notifyUpdate([\n                        \"delete\",\n                        [\n                            prop\n                        ],\n                        prevValue\n                    ]);\n                }\n                return deleted;\n            },\n            set (target, prop, value, receiver) {\n                const hasPrevValue = Reflect.has(target, prop);\n                const prevValue = Reflect.get(target, prop, receiver);\n                if (hasPrevValue && (objectIs(prevValue, value) || proxyCache.has(value) && objectIs(prevValue, proxyCache.get(value)))) {\n                    return true;\n                }\n                removePropListener(prop);\n                if (isObject(value)) {\n                    value = (0,proxy_compare__WEBPACK_IMPORTED_MODULE_0__.getUntracked)(value) || value;\n                }\n                let nextValue = value;\n                if (value instanceof Promise) {\n                    value.then((v)=>{\n                        value.status = \"fulfilled\";\n                        value.value = v;\n                        notifyUpdate([\n                            \"resolve\",\n                            [\n                                prop\n                            ],\n                            v\n                        ]);\n                    }).catch((e)=>{\n                        value.status = \"rejected\";\n                        value.reason = e;\n                        notifyUpdate([\n                            \"reject\",\n                            [\n                                prop\n                            ],\n                            e\n                        ]);\n                    });\n                } else {\n                    if (!proxyStateMap.has(value) && canProxy(value)) {\n                        nextValue = proxyFunction(value);\n                    }\n                    const childProxyState = !refSet.has(nextValue) && proxyStateMap.get(nextValue);\n                    if (childProxyState) {\n                        addPropListener(prop, childProxyState);\n                    }\n                }\n                Reflect.set(target, prop, nextValue, receiver);\n                notifyUpdate([\n                    \"set\",\n                    [\n                        prop\n                    ],\n                    value,\n                    prevValue\n                ]);\n                return true;\n            }\n        };\n        const proxyObject = newProxy(baseObject, handler);\n        proxyCache.set(initialObject, proxyObject);\n        const proxyState = [\n            baseObject,\n            ensureVersion,\n            createSnapshot,\n            addListener\n        ];\n        proxyStateMap.set(proxyObject, proxyState);\n        Reflect.ownKeys(initialObject).forEach((key)=>{\n            const desc = Object.getOwnPropertyDescriptor(initialObject, key);\n            if (\"value\" in desc) {\n                proxyObject[key] = initialObject[key];\n                delete desc.value;\n                delete desc.writable;\n            }\n            Object.defineProperty(baseObject, key, desc);\n        });\n        return proxyObject;\n    };\n    return [\n        // public functions\n        proxyFunction,\n        // shared state\n        proxyStateMap,\n        refSet,\n        // internal things\n        objectIs,\n        newProxy,\n        canProxy,\n        defaultHandlePromise,\n        snapCache,\n        createSnapshot,\n        proxyCache,\n        versionHolder\n    ];\n};\nconst [defaultProxyFunction] = buildProxyFunction();\nfunction proxy() {\n    let initialObject = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    return defaultProxyFunction(initialObject);\n}\nfunction getVersion(proxyObject) {\n    const proxyState = proxyStateMap.get(proxyObject);\n    return proxyState == null ? void 0 : proxyState[1]();\n}\nfunction subscribe(proxyObject, callback, notifyInSync) {\n    const proxyState = proxyStateMap.get(proxyObject);\n    if (( false ? 0 : void 0) !== \"production\" && !proxyState) {\n        console.warn(\"Please use proxy object\");\n    }\n    let promise;\n    const ops = [];\n    const addListener = proxyState[3];\n    let isListenerActive = false;\n    const listener = (op)=>{\n        ops.push(op);\n        if (notifyInSync) {\n            callback(ops.splice(0));\n            return;\n        }\n        if (!promise) {\n            promise = Promise.resolve().then(()=>{\n                promise = void 0;\n                if (isListenerActive) {\n                    callback(ops.splice(0));\n                }\n            });\n        }\n    };\n    const removeListener = addListener(listener);\n    isListenerActive = true;\n    return ()=>{\n        isListenerActive = false;\n        removeListener();\n    };\n}\nfunction snapshot(proxyObject, handlePromise) {\n    const proxyState = proxyStateMap.get(proxyObject);\n    if (( false ? 0 : void 0) !== \"production\" && !proxyState) {\n        console.warn(\"Please use proxy object\");\n    }\n    const [target, ensureVersion, createSnapshot] = proxyState;\n    return createSnapshot(target, ensureVersion(), handlePromise);\n}\nfunction ref(obj) {\n    refSet.add(obj);\n    return obj;\n}\nconst unstable_buildProxyFunction = buildProxyFunction;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy92YWx0aW8vZXNtL3ZhbmlsbGEubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBMEQ7QUFFMUQsTUFBTUUsV0FBVyxDQUFDQyxJQUFNLE9BQU9BLE1BQU0sWUFBWUEsTUFBTTtBQUN2RCxNQUFNQyxnQkFBZ0IsYUFBYSxHQUFHLElBQUlDO0FBQzFDLE1BQU1DLFNBQVMsYUFBYSxHQUFHLElBQUlDO0FBQ25DLE1BQU1DLHFCQUFxQjtRQUFDQyw0RUFBV0MsT0FBT0MsRUFBRSxFQUFFQyw0RUFBVyxDQUFDQyxRQUFRQyxVQUFZLElBQUlDLE1BQU1GLFFBQVFDLFVBQVVFLDRFQUFXLENBQUNiLElBQU1ELFNBQVNDLE1BQU0sQ0FBQ0csT0FBT1csR0FBRyxDQUFDZCxNQUFPZSxDQUFBQSxNQUFNQyxPQUFPLENBQUNoQixNQUFNLENBQUVpQixDQUFBQSxPQUFPQyxRQUFRLElBQUlsQixDQUFBQSxDQUFDLEtBQU0sQ0FBRUEsQ0FBQUEsYUFBYUUsT0FBTSxLQUFNLENBQUVGLENBQUFBLGFBQWFJLE9BQU0sS0FBTSxDQUFFSixDQUFBQSxhQUFhbUIsS0FBSSxLQUFNLENBQUVuQixDQUFBQSxhQUFhb0IsTUFBSyxLQUFNLENBQUVwQixDQUFBQSxhQUFhcUIsSUFBRyxLQUFNLENBQUVyQixDQUFBQSxhQUFhc0IsTUFBSyxLQUFNLENBQUV0QixDQUFBQSxhQUFhdUIsTUFBSyxLQUFNLENBQUV2QixDQUFBQSxhQUFhd0IsV0FBVSxHQUFJQyx3RkFBdUIsQ0FBQ0M7UUFDMWIsT0FBUUEsUUFBUUMsTUFBTTtZQUNwQixLQUFLO2dCQUNILE9BQU9ELFFBQVFFLEtBQUs7WUFDdEIsS0FBSztnQkFDSCxNQUFNRixRQUFRRyxNQUFNO1lBQ3RCO2dCQUNFLE1BQU1IO1FBQ1Y7SUFDRixHQUFHSSw2RUFBWSxhQUFhLEdBQUcsSUFBSTVCLFdBQVc2QixrRkFBaUIsU0FBQ3JCLFFBQVFzQjtZQUFTQyxpRkFBZ0JSO1FBQy9G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QUFNaEQsV0FBVyxDQUFDRjtRQUNoQmlELElBQUlFLElBQUksQ0FBQ25EO1FBQ1QsSUFBSThDLGNBQWM7WUFDaEJELFNBQVNJLElBQUlHLE1BQU0sQ0FBQztZQUNwQjtRQUNGO1FBQ0EsSUFBSSxDQUFDdkYsU0FBUztZQUNaQSxVQUFVc0IsUUFBUWtFLE9BQU8sR0FBR3BCLElBQUksQ0FBQztnQkFDL0JwRSxVQUFVLEtBQUs7Z0JBQ2YsSUFBSXFGLGtCQUFrQjtvQkFDcEJMLFNBQVNJLElBQUlHLE1BQU0sQ0FBQztnQkFDdEI7WUFDRjtRQUNGO0lBQ0Y7SUFDQSxNQUFNM0IsaUJBQWlCSCxZQUFZcEI7SUFDbkNnRCxtQkFBbUI7SUFDbkIsT0FBTztRQUNMQSxtQkFBbUI7UUFDbkJ6QjtJQUNGO0FBQ0Y7QUFDQSxTQUFTNkIsU0FBU2hCLFdBQVcsRUFBRWxFLGFBQWE7SUFDMUMsTUFBTW1FLGFBQWFuRyxjQUFja0MsR0FBRyxDQUFDZ0U7SUFDckMsSUFBSSxDQUFDLE1BQWUsR0FBRyxDQUFvQixHQUFHLEtBQUssT0FBTyxnQkFBZ0IsQ0FBQ0MsWUFBWTtRQUNyRlEsUUFBUUMsSUFBSSxDQUFDO0lBQ2Y7SUFDQSxNQUFNLENBQUNuRyxRQUFRd0MsZUFBZW5CLGVBQWUsR0FBR3FFO0lBQ2hELE9BQU9yRSxlQUFlckIsUUFBUXdDLGlCQUFpQmpCO0FBQ2pEO0FBQ0EsU0FBU21GLElBQUlDLEdBQUc7SUFDZGxILE9BQU9pRixHQUFHLENBQUNpQztJQUNYLE9BQU9BO0FBQ1Q7QUFDQSxNQUFNQyw4QkFBOEJqSDtBQUVnRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvdmFsdGlvL2VzbS92YW5pbGxhLm1qcz9jMTllIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1hcmtUb1RyYWNrLCBnZXRVbnRyYWNrZWQgfSBmcm9tICdwcm94eS1jb21wYXJlJztcblxuY29uc3QgaXNPYmplY3QgPSAoeCkgPT4gdHlwZW9mIHggPT09IFwib2JqZWN0XCIgJiYgeCAhPT0gbnVsbDtcbmNvbnN0IHByb3h5U3RhdGVNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHJlZlNldCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha1NldCgpO1xuY29uc3QgYnVpbGRQcm94eUZ1bmN0aW9uID0gKG9iamVjdElzID0gT2JqZWN0LmlzLCBuZXdQcm94eSA9ICh0YXJnZXQsIGhhbmRsZXIpID0+IG5ldyBQcm94eSh0YXJnZXQsIGhhbmRsZXIpLCBjYW5Qcm94eSA9ICh4KSA9PiBpc09iamVjdCh4KSAmJiAhcmVmU2V0Lmhhcyh4KSAmJiAoQXJyYXkuaXNBcnJheSh4KSB8fCAhKFN5bWJvbC5pdGVyYXRvciBpbiB4KSkgJiYgISh4IGluc3RhbmNlb2YgV2Vha01hcCkgJiYgISh4IGluc3RhbmNlb2YgV2Vha1NldCkgJiYgISh4IGluc3RhbmNlb2YgRXJyb3IpICYmICEoeCBpbnN0YW5jZW9mIE51bWJlcikgJiYgISh4IGluc3RhbmNlb2YgRGF0ZSkgJiYgISh4IGluc3RhbmNlb2YgU3RyaW5nKSAmJiAhKHggaW5zdGFuY2VvZiBSZWdFeHApICYmICEoeCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSwgZGVmYXVsdEhhbmRsZVByb21pc2UgPSAocHJvbWlzZSkgPT4ge1xuICBzd2l0Y2ggKHByb21pc2Uuc3RhdHVzKSB7XG4gICAgY2FzZSBcImZ1bGZpbGxlZFwiOlxuICAgICAgcmV0dXJuIHByb21pc2UudmFsdWU7XG4gICAgY2FzZSBcInJlamVjdGVkXCI6XG4gICAgICB0aHJvdyBwcm9taXNlLnJlYXNvbjtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgcHJvbWlzZTtcbiAgfVxufSwgc25hcENhY2hlID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCksIGNyZWF0ZVNuYXBzaG90ID0gKHRhcmdldCwgdmVyc2lvbiwgaGFuZGxlUHJvbWlzZSA9IGRlZmF1bHRIYW5kbGVQcm9taXNlKSA9PiB7XG4gIGNvbnN0IGNhY2hlID0gc25hcENhY2hlLmdldCh0YXJnZXQpO1xuICBpZiAoKGNhY2hlID09IG51bGwgPyB2b2lkIDAgOiBjYWNoZVswXSkgPT09IHZlcnNpb24pIHtcbiAgICByZXR1cm4gY2FjaGVbMV07XG4gIH1cbiAgY29uc3Qgc25hcCA9IEFycmF5LmlzQXJyYXkodGFyZ2V0KSA/IFtdIDogT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSk7XG4gIG1hcmtUb1RyYWNrKHNuYXAsIHRydWUpO1xuICBzbmFwQ2FjaGUuc2V0KHRhcmdldCwgW3ZlcnNpb24sIHNuYXBdKTtcbiAgUmVmbGVjdC5vd25LZXlzKHRhcmdldCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc25hcCwga2V5KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZSA9IFJlZmxlY3QuZ2V0KHRhcmdldCwga2V5KTtcbiAgICBjb25zdCBkZXNjID0ge1xuICAgICAgdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgLy8gVGhpcyBpcyBpbnRlbnRpb25hbCB0byBhdm9pZCBjb3B5aW5nIHdpdGggcHJveHktY29tcGFyZS5cbiAgICAgIC8vIEl0J3Mgc3RpbGwgbm9uLXdyaXRhYmxlLCBzbyBpdCBhdm9pZHMgYXNzaWduaW5nIGEgdmFsdWUuXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9O1xuICAgIGlmIChyZWZTZXQuaGFzKHZhbHVlKSkge1xuICAgICAgbWFya1RvVHJhY2sodmFsdWUsIGZhbHNlKTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgZGVsZXRlIGRlc2MudmFsdWU7XG4gICAgICBkZXNjLmdldCA9ICgpID0+IGhhbmRsZVByb21pc2UodmFsdWUpO1xuICAgIH0gZWxzZSBpZiAocHJveHlTdGF0ZU1hcC5oYXModmFsdWUpKSB7XG4gICAgICBjb25zdCBbdGFyZ2V0MiwgZW5zdXJlVmVyc2lvbl0gPSBwcm94eVN0YXRlTWFwLmdldChcbiAgICAgICAgdmFsdWVcbiAgICAgICk7XG4gICAgICBkZXNjLnZhbHVlID0gY3JlYXRlU25hcHNob3QoXG4gICAgICAgIHRhcmdldDIsXG4gICAgICAgIGVuc3VyZVZlcnNpb24oKSxcbiAgICAgICAgaGFuZGxlUHJvbWlzZVxuICAgICAgKTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNuYXAsIGtleSwgZGVzYyk7XG4gIH0pO1xuICByZXR1cm4gT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHNuYXApO1xufSwgcHJveHlDYWNoZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpLCB2ZXJzaW9uSG9sZGVyID0gWzEsIDFdLCBwcm94eUZ1bmN0aW9uID0gKGluaXRpYWxPYmplY3QpID0+IHtcbiAgaWYgKCFpc09iamVjdChpbml0aWFsT2JqZWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIm9iamVjdCByZXF1aXJlZFwiKTtcbiAgfVxuICBjb25zdCBmb3VuZCA9IHByb3h5Q2FjaGUuZ2V0KGluaXRpYWxPYmplY3QpO1xuICBpZiAoZm91bmQpIHtcbiAgICByZXR1cm4gZm91bmQ7XG4gIH1cbiAgbGV0IHZlcnNpb24gPSB2ZXJzaW9uSG9sZGVyWzBdO1xuICBjb25zdCBsaXN0ZW5lcnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICBjb25zdCBub3RpZnlVcGRhdGUgPSAob3AsIG5leHRWZXJzaW9uID0gKyt2ZXJzaW9uSG9sZGVyWzBdKSA9PiB7XG4gICAgaWYgKHZlcnNpb24gIT09IG5leHRWZXJzaW9uKSB7XG4gICAgICB2ZXJzaW9uID0gbmV4dFZlcnNpb247XG4gICAgICBsaXN0ZW5lcnMuZm9yRWFjaCgobGlzdGVuZXIpID0+IGxpc3RlbmVyKG9wLCBuZXh0VmVyc2lvbikpO1xuICAgIH1cbiAgfTtcbiAgbGV0IGNoZWNrVmVyc2lvbiA9IHZlcnNpb25Ib2xkZXJbMV07XG4gIGNvbnN0IGVuc3VyZVZlcnNpb24gPSAobmV4dENoZWNrVmVyc2lvbiA9ICsrdmVyc2lvbkhvbGRlclsxXSkgPT4ge1xuICAgIGlmIChjaGVja1ZlcnNpb24gIT09IG5leHRDaGVja1ZlcnNpb24gJiYgIWxpc3RlbmVycy5zaXplKSB7XG4gICAgICBjaGVja1ZlcnNpb24gPSBuZXh0Q2hlY2tWZXJzaW9uO1xuICAgICAgcHJvcFByb3h5U3RhdGVzLmZvckVhY2goKFtwcm9wUHJveHlTdGF0ZV0pID0+IHtcbiAgICAgICAgY29uc3QgcHJvcFZlcnNpb24gPSBwcm9wUHJveHlTdGF0ZVsxXShuZXh0Q2hlY2tWZXJzaW9uKTtcbiAgICAgICAgaWYgKHByb3BWZXJzaW9uID4gdmVyc2lvbikge1xuICAgICAgICAgIHZlcnNpb24gPSBwcm9wVmVyc2lvbjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB2ZXJzaW9uO1xuICB9O1xuICBjb25zdCBjcmVhdGVQcm9wTGlzdGVuZXIgPSAocHJvcCkgPT4gKG9wLCBuZXh0VmVyc2lvbikgPT4ge1xuICAgIGNvbnN0IG5ld09wID0gWy4uLm9wXTtcbiAgICBuZXdPcFsxXSA9IFtwcm9wLCAuLi5uZXdPcFsxXV07XG4gICAgbm90aWZ5VXBkYXRlKG5ld09wLCBuZXh0VmVyc2lvbik7XG4gIH07XG4gIGNvbnN0IHByb3BQcm94eVN0YXRlcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIGNvbnN0IGFkZFByb3BMaXN0ZW5lciA9IChwcm9wLCBwcm9wUHJveHlTdGF0ZSkgPT4ge1xuICAgIGlmICgoaW1wb3J0Lm1ldGEuZW52ID8gaW1wb3J0Lm1ldGEuZW52Lk1PREUgOiB2b2lkIDApICE9PSBcInByb2R1Y3Rpb25cIiAmJiBwcm9wUHJveHlTdGF0ZXMuaGFzKHByb3ApKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJwcm9wIGxpc3RlbmVyIGFscmVhZHkgZXhpc3RzXCIpO1xuICAgIH1cbiAgICBpZiAobGlzdGVuZXJzLnNpemUpIHtcbiAgICAgIGNvbnN0IHJlbW92ZSA9IHByb3BQcm94eVN0YXRlWzNdKGNyZWF0ZVByb3BMaXN0ZW5lcihwcm9wKSk7XG4gICAgICBwcm9wUHJveHlTdGF0ZXMuc2V0KHByb3AsIFtwcm9wUHJveHlTdGF0ZSwgcmVtb3ZlXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BQcm94eVN0YXRlcy5zZXQocHJvcCwgW3Byb3BQcm94eVN0YXRlXSk7XG4gICAgfVxuICB9O1xuICBjb25zdCByZW1vdmVQcm9wTGlzdGVuZXIgPSAocHJvcCkgPT4ge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBlbnRyeSA9IHByb3BQcm94eVN0YXRlcy5nZXQocHJvcCk7XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBwcm9wUHJveHlTdGF0ZXMuZGVsZXRlKHByb3ApO1xuICAgICAgKF9hID0gZW50cnlbMV0pID09IG51bGwgPyB2b2lkIDAgOiBfYS5jYWxsKGVudHJ5KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGFkZExpc3RlbmVyID0gKGxpc3RlbmVyKSA9PiB7XG4gICAgbGlzdGVuZXJzLmFkZChsaXN0ZW5lcik7XG4gICAgaWYgKGxpc3RlbmVycy5zaXplID09PSAxKSB7XG4gICAgICBwcm9wUHJveHlTdGF0ZXMuZm9yRWFjaCgoW3Byb3BQcm94eVN0YXRlLCBwcmV2UmVtb3ZlXSwgcHJvcCkgPT4ge1xuICAgICAgICBpZiAoKGltcG9ydC5tZXRhLmVudiA/IGltcG9ydC5tZXRhLmVudi5NT0RFIDogdm9pZCAwKSAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgcHJldlJlbW92ZSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInJlbW92ZSBhbHJlYWR5IGV4aXN0c1wiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZW1vdmUgPSBwcm9wUHJveHlTdGF0ZVszXShjcmVhdGVQcm9wTGlzdGVuZXIocHJvcCkpO1xuICAgICAgICBwcm9wUHJveHlTdGF0ZXMuc2V0KHByb3AsIFtwcm9wUHJveHlTdGF0ZSwgcmVtb3ZlXSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgcmVtb3ZlTGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgICBsaXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVyKTtcbiAgICAgIGlmIChsaXN0ZW5lcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICBwcm9wUHJveHlTdGF0ZXMuZm9yRWFjaCgoW3Byb3BQcm94eVN0YXRlLCByZW1vdmVdLCBwcm9wKSA9PiB7XG4gICAgICAgICAgaWYgKHJlbW92ZSkge1xuICAgICAgICAgICAgcmVtb3ZlKCk7XG4gICAgICAgICAgICBwcm9wUHJveHlTdGF0ZXMuc2V0KHByb3AsIFtwcm9wUHJveHlTdGF0ZV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gcmVtb3ZlTGlzdGVuZXI7XG4gIH07XG4gIGNvbnN0IGJhc2VPYmplY3QgPSBBcnJheS5pc0FycmF5KGluaXRpYWxPYmplY3QpID8gW10gOiBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZihpbml0aWFsT2JqZWN0KSk7XG4gIGNvbnN0IGhhbmRsZXIgPSB7XG4gICAgZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wKSB7XG4gICAgICBjb25zdCBwcmV2VmFsdWUgPSBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3ApO1xuICAgICAgcmVtb3ZlUHJvcExpc3RlbmVyKHByb3ApO1xuICAgICAgY29uc3QgZGVsZXRlZCA9IFJlZmxlY3QuZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wKTtcbiAgICAgIGlmIChkZWxldGVkKSB7XG4gICAgICAgIG5vdGlmeVVwZGF0ZShbXCJkZWxldGVcIiwgW3Byb3BdLCBwcmV2VmFsdWVdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWxldGVkO1xuICAgIH0sXG4gICAgc2V0KHRhcmdldCwgcHJvcCwgdmFsdWUsIHJlY2VpdmVyKSB7XG4gICAgICBjb25zdCBoYXNQcmV2VmFsdWUgPSBSZWZsZWN0Lmhhcyh0YXJnZXQsIHByb3ApO1xuICAgICAgY29uc3QgcHJldlZhbHVlID0gUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcik7XG4gICAgICBpZiAoaGFzUHJldlZhbHVlICYmIChvYmplY3RJcyhwcmV2VmFsdWUsIHZhbHVlKSB8fCBwcm94eUNhY2hlLmhhcyh2YWx1ZSkgJiYgb2JqZWN0SXMocHJldlZhbHVlLCBwcm94eUNhY2hlLmdldCh2YWx1ZSkpKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJlbW92ZVByb3BMaXN0ZW5lcihwcm9wKTtcbiAgICAgIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSBnZXRVbnRyYWNrZWQodmFsdWUpIHx8IHZhbHVlO1xuICAgICAgfVxuICAgICAgbGV0IG5leHRWYWx1ZSA9IHZhbHVlO1xuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICB2YWx1ZS50aGVuKCh2KSA9PiB7XG4gICAgICAgICAgdmFsdWUuc3RhdHVzID0gXCJmdWxmaWxsZWRcIjtcbiAgICAgICAgICB2YWx1ZS52YWx1ZSA9IHY7XG4gICAgICAgICAgbm90aWZ5VXBkYXRlKFtcInJlc29sdmVcIiwgW3Byb3BdLCB2XSk7XG4gICAgICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgdmFsdWUuc3RhdHVzID0gXCJyZWplY3RlZFwiO1xuICAgICAgICAgIHZhbHVlLnJlYXNvbiA9IGU7XG4gICAgICAgICAgbm90aWZ5VXBkYXRlKFtcInJlamVjdFwiLCBbcHJvcF0sIGVdKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIXByb3h5U3RhdGVNYXAuaGFzKHZhbHVlKSAmJiBjYW5Qcm94eSh2YWx1ZSkpIHtcbiAgICAgICAgICBuZXh0VmFsdWUgPSBwcm94eUZ1bmN0aW9uKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGlsZFByb3h5U3RhdGUgPSAhcmVmU2V0LmhhcyhuZXh0VmFsdWUpICYmIHByb3h5U3RhdGVNYXAuZ2V0KG5leHRWYWx1ZSk7XG4gICAgICAgIGlmIChjaGlsZFByb3h5U3RhdGUpIHtcbiAgICAgICAgICBhZGRQcm9wTGlzdGVuZXIocHJvcCwgY2hpbGRQcm94eVN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgUmVmbGVjdC5zZXQodGFyZ2V0LCBwcm9wLCBuZXh0VmFsdWUsIHJlY2VpdmVyKTtcbiAgICAgIG5vdGlmeVVwZGF0ZShbXCJzZXRcIiwgW3Byb3BdLCB2YWx1ZSwgcHJldlZhbHVlXSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHByb3h5T2JqZWN0ID0gbmV3UHJveHkoYmFzZU9iamVjdCwgaGFuZGxlcik7XG4gIHByb3h5Q2FjaGUuc2V0KGluaXRpYWxPYmplY3QsIHByb3h5T2JqZWN0KTtcbiAgY29uc3QgcHJveHlTdGF0ZSA9IFtcbiAgICBiYXNlT2JqZWN0LFxuICAgIGVuc3VyZVZlcnNpb24sXG4gICAgY3JlYXRlU25hcHNob3QsXG4gICAgYWRkTGlzdGVuZXJcbiAgXTtcbiAgcHJveHlTdGF0ZU1hcC5zZXQocHJveHlPYmplY3QsIHByb3h5U3RhdGUpO1xuICBSZWZsZWN0Lm93bktleXMoaW5pdGlhbE9iamVjdCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgY29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoXG4gICAgICBpbml0aWFsT2JqZWN0LFxuICAgICAga2V5XG4gICAgKTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHtcbiAgICAgIHByb3h5T2JqZWN0W2tleV0gPSBpbml0aWFsT2JqZWN0W2tleV07XG4gICAgICBkZWxldGUgZGVzYy52YWx1ZTtcbiAgICAgIGRlbGV0ZSBkZXNjLndyaXRhYmxlO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYmFzZU9iamVjdCwga2V5LCBkZXNjKTtcbiAgfSk7XG4gIHJldHVybiBwcm94eU9iamVjdDtcbn0pID0+IFtcbiAgLy8gcHVibGljIGZ1bmN0aW9uc1xuICBwcm94eUZ1bmN0aW9uLFxuICAvLyBzaGFyZWQgc3RhdGVcbiAgcHJveHlTdGF0ZU1hcCxcbiAgcmVmU2V0LFxuICAvLyBpbnRlcm5hbCB0aGluZ3NcbiAgb2JqZWN0SXMsXG4gIG5ld1Byb3h5LFxuICBjYW5Qcm94eSxcbiAgZGVmYXVsdEhhbmRsZVByb21pc2UsXG4gIHNuYXBDYWNoZSxcbiAgY3JlYXRlU25hcHNob3QsXG4gIHByb3h5Q2FjaGUsXG4gIHZlcnNpb25Ib2xkZXJcbl07XG5jb25zdCBbZGVmYXVsdFByb3h5RnVuY3Rpb25dID0gYnVpbGRQcm94eUZ1bmN0aW9uKCk7XG5mdW5jdGlvbiBwcm94eShpbml0aWFsT2JqZWN0ID0ge30pIHtcbiAgcmV0dXJuIGRlZmF1bHRQcm94eUZ1bmN0aW9uKGluaXRpYWxPYmplY3QpO1xufVxuZnVuY3Rpb24gZ2V0VmVyc2lvbihwcm94eU9iamVjdCkge1xuICBjb25zdCBwcm94eVN0YXRlID0gcHJveHlTdGF0ZU1hcC5nZXQocHJveHlPYmplY3QpO1xuICByZXR1cm4gcHJveHlTdGF0ZSA9PSBudWxsID8gdm9pZCAwIDogcHJveHlTdGF0ZVsxXSgpO1xufVxuZnVuY3Rpb24gc3Vic2NyaWJlKHByb3h5T2JqZWN0LCBjYWxsYmFjaywgbm90aWZ5SW5TeW5jKSB7XG4gIGNvbnN0IHByb3h5U3RhdGUgPSBwcm94eVN0YXRlTWFwLmdldChwcm94eU9iamVjdCk7XG4gIGlmICgoaW1wb3J0Lm1ldGEuZW52ID8gaW1wb3J0Lm1ldGEuZW52Lk1PREUgOiB2b2lkIDApICE9PSBcInByb2R1Y3Rpb25cIiAmJiAhcHJveHlTdGF0ZSkge1xuICAgIGNvbnNvbGUud2FybihcIlBsZWFzZSB1c2UgcHJveHkgb2JqZWN0XCIpO1xuICB9XG4gIGxldCBwcm9taXNlO1xuICBjb25zdCBvcHMgPSBbXTtcbiAgY29uc3QgYWRkTGlzdGVuZXIgPSBwcm94eVN0YXRlWzNdO1xuICBsZXQgaXNMaXN0ZW5lckFjdGl2ZSA9IGZhbHNlO1xuICBjb25zdCBsaXN0ZW5lciA9IChvcCkgPT4ge1xuICAgIG9wcy5wdXNoKG9wKTtcbiAgICBpZiAobm90aWZ5SW5TeW5jKSB7XG4gICAgICBjYWxsYmFjayhvcHMuc3BsaWNlKDApKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFwcm9taXNlKSB7XG4gICAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICAgIHByb21pc2UgPSB2b2lkIDA7XG4gICAgICAgIGlmIChpc0xpc3RlbmVyQWN0aXZlKSB7XG4gICAgICAgICAgY2FsbGJhY2sob3BzLnNwbGljZSgwKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgcmVtb3ZlTGlzdGVuZXIgPSBhZGRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIGlzTGlzdGVuZXJBY3RpdmUgPSB0cnVlO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGlzTGlzdGVuZXJBY3RpdmUgPSBmYWxzZTtcbiAgICByZW1vdmVMaXN0ZW5lcigpO1xuICB9O1xufVxuZnVuY3Rpb24gc25hcHNob3QocHJveHlPYmplY3QsIGhhbmRsZVByb21pc2UpIHtcbiAgY29uc3QgcHJveHlTdGF0ZSA9IHByb3h5U3RhdGVNYXAuZ2V0KHByb3h5T2JqZWN0KTtcbiAgaWYgKChpbXBvcnQubWV0YS5lbnYgPyBpbXBvcnQubWV0YS5lbnYuTU9ERSA6IHZvaWQgMCkgIT09IFwicHJvZHVjdGlvblwiICYmICFwcm94eVN0YXRlKSB7XG4gICAgY29uc29sZS53YXJuKFwiUGxlYXNlIHVzZSBwcm94eSBvYmplY3RcIik7XG4gIH1cbiAgY29uc3QgW3RhcmdldCwgZW5zdXJlVmVyc2lvbiwgY3JlYXRlU25hcHNob3RdID0gcHJveHlTdGF0ZTtcbiAgcmV0dXJuIGNyZWF0ZVNuYXBzaG90KHRhcmdldCwgZW5zdXJlVmVyc2lvbigpLCBoYW5kbGVQcm9taXNlKTtcbn1cbmZ1bmN0aW9uIHJlZihvYmopIHtcbiAgcmVmU2V0LmFkZChvYmopO1xuICByZXR1cm4gb2JqO1xufVxuY29uc3QgdW5zdGFibGVfYnVpbGRQcm94eUZ1bmN0aW9uID0gYnVpbGRQcm94eUZ1bmN0aW9uO1xuXG5leHBvcnQgeyBnZXRWZXJzaW9uLCBwcm94eSwgcmVmLCBzbmFwc2hvdCwgc3Vic2NyaWJlLCB1bnN0YWJsZV9idWlsZFByb3h5RnVuY3Rpb24gfTtcbiJdLCJuYW1lcyI6WyJtYXJrVG9UcmFjayIsImdldFVudHJhY2tlZCIsImlzT2JqZWN0IiwieCIsInByb3h5U3RhdGVNYXAiLCJXZWFrTWFwIiwicmVmU2V0IiwiV2Vha1NldCIsImJ1aWxkUHJveHlGdW5jdGlvbiIsIm9iamVjdElzIiwiT2JqZWN0IiwiaXMiLCJuZXdQcm94eSIsInRhcmdldCIsImhhbmRsZXIiLCJQcm94eSIsImNhblByb3h5IiwiaGFzIiwiQXJyYXkiLCJpc0FycmF5IiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJFcnJvciIsIk51bWJlciIsIkRhdGUiLCJTdHJpbmciLCJSZWdFeHAiLCJBcnJheUJ1ZmZlciIsImRlZmF1bHRIYW5kbGVQcm9taXNlIiwicHJvbWlzZSIsInN0YXR1cyIsInZhbHVlIiwicmVhc29uIiwic25hcENhY2hlIiwiY3JlYXRlU25hcHNob3QiLCJ2ZXJzaW9uIiwiaGFuZGxlUHJvbWlzZSIsImNhY2hlIiwiZ2V0Iiwic25hcCIsImNyZWF0ZSIsImdldFByb3RvdHlwZU9mIiwic2V0IiwiUmVmbGVjdCIsIm93bktleXMiLCJmb3JFYWNoIiwia2V5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZGVzYyIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJQcm9taXNlIiwidGFyZ2V0MiIsImVuc3VyZVZlcnNpb24iLCJkZWZpbmVQcm9wZXJ0eSIsInByZXZlbnRFeHRlbnNpb25zIiwicHJveHlDYWNoZSIsInZlcnNpb25Ib2xkZXIiLCJwcm94eUZ1bmN0aW9uIiwiaW5pdGlhbE9iamVjdCIsImZvdW5kIiwibGlzdGVuZXJzIiwiU2V0Iiwibm90aWZ5VXBkYXRlIiwib3AiLCJuZXh0VmVyc2lvbiIsImxpc3RlbmVyIiwiY2hlY2tWZXJzaW9uIiwibmV4dENoZWNrVmVyc2lvbiIsInNpemUiLCJwcm9wUHJveHlTdGF0ZXMiLCJwcm9wUHJveHlTdGF0ZSIsInByb3BWZXJzaW9uIiwiY3JlYXRlUHJvcExpc3RlbmVyIiwicHJvcCIsIm5ld09wIiwiTWFwIiwiYWRkUHJvcExpc3RlbmVyIiwiZW52IiwiTU9ERSIsInJlbW92ZSIsInJlbW92ZVByb3BMaXN0ZW5lciIsIl9hIiwiZW50cnkiLCJkZWxldGUiLCJjYWxsIiwiYWRkTGlzdGVuZXIiLCJhZGQiLCJwcmV2UmVtb3ZlIiwicmVtb3ZlTGlzdGVuZXIiLCJiYXNlT2JqZWN0IiwiZGVsZXRlUHJvcGVydHkiLCJwcmV2VmFsdWUiLCJkZWxldGVkIiwicmVjZWl2ZXIiLCJoYXNQcmV2VmFsdWUiLCJuZXh0VmFsdWUiLCJ0aGVuIiwidiIsImNhdGNoIiwiZSIsImNoaWxkUHJveHlTdGF0ZSIsInByb3h5T2JqZWN0IiwicHJveHlTdGF0ZSIsIndyaXRhYmxlIiwiZGVmYXVsdFByb3h5RnVuY3Rpb24iLCJwcm94eSIsImdldFZlcnNpb24iLCJzdWJzY3JpYmUiLCJjYWxsYmFjayIsIm5vdGlmeUluU3luYyIsImNvbnNvbGUiLCJ3YXJuIiwib3BzIiwiaXNMaXN0ZW5lckFjdGl2ZSIsInB1c2giLCJzcGxpY2UiLCJyZXNvbHZlIiwic25hcHNob3QiLCJyZWYiLCJvYmoiLCJ1bnN0YWJsZV9idWlsZFByb3h5RnVuY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/valtio/esm/vanilla.mjs\n"));

/***/ })

}]);